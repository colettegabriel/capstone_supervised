{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import math\n",
    "import imblearn\n",
    "%matplotlib inline\n",
    "from sklearn import svm\n",
    "import time\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from collections import Counter\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.svm import LinearSVC\n",
    "from sklearn import metrics\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from imblearn.over_sampling import ADASYN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"/Users/colette/Documents/GitHub/credit_card_log.csv\"\n",
    "\n",
    "df = pd.read_csv(filename)\n",
    "\n",
    "pd.options.display.float_format = '{:.3f}'.format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>nameOrig</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>nameDest</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "      <th>isFlaggedFraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>9839.640</td>\n",
       "      <td>C1231006815</td>\n",
       "      <td>170136.000</td>\n",
       "      <td>160296.360</td>\n",
       "      <td>M1979787155</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>1864.280</td>\n",
       "      <td>C1666544295</td>\n",
       "      <td>21249.000</td>\n",
       "      <td>19384.720</td>\n",
       "      <td>M2044282225</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>181.000</td>\n",
       "      <td>C1305486145</td>\n",
       "      <td>181.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>C553264065</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>CASH_OUT</td>\n",
       "      <td>181.000</td>\n",
       "      <td>C840083671</td>\n",
       "      <td>181.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>C38997010</td>\n",
       "      <td>21182.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>11668.140</td>\n",
       "      <td>C2048537720</td>\n",
       "      <td>41554.000</td>\n",
       "      <td>29885.860</td>\n",
       "      <td>M1230701703</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n",
       "0     1   PAYMENT  9839.640  C1231006815     170136.000      160296.360   \n",
       "1     1   PAYMENT  1864.280  C1666544295      21249.000       19384.720   \n",
       "2     1  TRANSFER   181.000  C1305486145        181.000           0.000   \n",
       "3     1  CASH_OUT   181.000   C840083671        181.000           0.000   \n",
       "4     1   PAYMENT 11668.140  C2048537720      41554.000       29885.860   \n",
       "\n",
       "      nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n",
       "0  M1979787155           0.000           0.000        0               0  \n",
       "1  M2044282225           0.000           0.000        0               0  \n",
       "2   C553264065           0.000           0.000        1               0  \n",
       "3    C38997010       21182.000           0.000        1               0  \n",
       "4  M1230701703           0.000           0.000        0               0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6362620 entries, 0 to 6362619\n",
      "Data columns (total 11 columns):\n",
      "step              int64\n",
      "type              object\n",
      "amount            float64\n",
      "nameOrig          object\n",
      "oldbalanceOrg     float64\n",
      "newbalanceOrig    float64\n",
      "nameDest          object\n",
      "oldbalanceDest    float64\n",
      "newbalanceDest    float64\n",
      "isFraud           int64\n",
      "isFlaggedFraud    int64\n",
      "dtypes: float64(5), int64(3), object(3)\n",
      "memory usage: 534.0+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#there are over 10 million values for the two name fields\n",
    "df = df.drop(['nameOrig', 'nameDest'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#one hot encoding for \"type\" feature, listing the 5 types of transactions\n",
    "df = pd.concat([df, pd.get_dummies(df.type, prefix=\"type\", drop_first=True)], axis=1)\n",
    "\n",
    "dummy_column_names = list(pd.get_dummies(df.type, prefix=\"type\", drop_first=True).columns)\n",
    "\n",
    "df = df.drop('type', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6362620 entries, 0 to 6362619\n",
      "Data columns (total 12 columns):\n",
      "step              int64\n",
      "amount            float64\n",
      "oldbalanceOrg     float64\n",
      "newbalanceOrig    float64\n",
      "oldbalanceDest    float64\n",
      "newbalanceDest    float64\n",
      "isFraud           int64\n",
      "isFlaggedFraud    int64\n",
      "type_CASH_OUT     uint8\n",
      "type_DEBIT        uint8\n",
      "type_PAYMENT      uint8\n",
      "type_TRANSFER     uint8\n",
      "dtypes: float64(5), int64(3), uint8(4)\n",
      "memory usage: 412.6 MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>amount</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "      <th>isFlaggedFraud</th>\n",
       "      <th>type_CASH_OUT</th>\n",
       "      <th>type_DEBIT</th>\n",
       "      <th>type_PAYMENT</th>\n",
       "      <th>type_TRANSFER</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>step</th>\n",
       "      <td>1.000</td>\n",
       "      <td>0.022</td>\n",
       "      <td>-0.010</td>\n",
       "      <td>-0.010</td>\n",
       "      <td>0.028</td>\n",
       "      <td>0.026</td>\n",
       "      <td>0.032</td>\n",
       "      <td>0.003</td>\n",
       "      <td>-0.013</td>\n",
       "      <td>0.003</td>\n",
       "      <td>0.005</td>\n",
       "      <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>amount</th>\n",
       "      <td>0.022</td>\n",
       "      <td>1.000</td>\n",
       "      <td>-0.003</td>\n",
       "      <td>-0.008</td>\n",
       "      <td>0.294</td>\n",
       "      <td>0.459</td>\n",
       "      <td>0.077</td>\n",
       "      <td>0.012</td>\n",
       "      <td>-0.004</td>\n",
       "      <td>-0.023</td>\n",
       "      <td>-0.197</td>\n",
       "      <td>0.366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <td>-0.010</td>\n",
       "      <td>-0.003</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.066</td>\n",
       "      <td>0.042</td>\n",
       "      <td>0.010</td>\n",
       "      <td>0.004</td>\n",
       "      <td>-0.201</td>\n",
       "      <td>-0.021</td>\n",
       "      <td>-0.189</td>\n",
       "      <td>-0.082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <td>-0.010</td>\n",
       "      <td>-0.008</td>\n",
       "      <td>0.999</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.068</td>\n",
       "      <td>0.042</td>\n",
       "      <td>-0.008</td>\n",
       "      <td>0.004</td>\n",
       "      <td>-0.211</td>\n",
       "      <td>-0.022</td>\n",
       "      <td>-0.194</td>\n",
       "      <td>-0.087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <td>0.028</td>\n",
       "      <td>0.294</td>\n",
       "      <td>0.066</td>\n",
       "      <td>0.068</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.977</td>\n",
       "      <td>-0.006</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>0.086</td>\n",
       "      <td>0.009</td>\n",
       "      <td>-0.231</td>\n",
       "      <td>0.130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>newbalanceDest</th>\n",
       "      <td>0.026</td>\n",
       "      <td>0.459</td>\n",
       "      <td>0.042</td>\n",
       "      <td>0.042</td>\n",
       "      <td>0.977</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.001</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>0.093</td>\n",
       "      <td>0.006</td>\n",
       "      <td>-0.238</td>\n",
       "      <td>0.192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>isFraud</th>\n",
       "      <td>0.032</td>\n",
       "      <td>0.077</td>\n",
       "      <td>0.010</td>\n",
       "      <td>-0.008</td>\n",
       "      <td>-0.006</td>\n",
       "      <td>0.001</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.044</td>\n",
       "      <td>0.011</td>\n",
       "      <td>-0.003</td>\n",
       "      <td>-0.026</td>\n",
       "      <td>0.054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>isFlaggedFraud</th>\n",
       "      <td>0.003</td>\n",
       "      <td>0.012</td>\n",
       "      <td>0.004</td>\n",
       "      <td>0.004</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>0.044</td>\n",
       "      <td>1.000</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>-0.000</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>0.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>type_CASH_OUT</th>\n",
       "      <td>-0.013</td>\n",
       "      <td>-0.004</td>\n",
       "      <td>-0.201</td>\n",
       "      <td>-0.211</td>\n",
       "      <td>0.086</td>\n",
       "      <td>0.093</td>\n",
       "      <td>0.011</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>1.000</td>\n",
       "      <td>-0.060</td>\n",
       "      <td>-0.526</td>\n",
       "      <td>-0.223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>type_DEBIT</th>\n",
       "      <td>0.003</td>\n",
       "      <td>-0.023</td>\n",
       "      <td>-0.021</td>\n",
       "      <td>-0.022</td>\n",
       "      <td>0.009</td>\n",
       "      <td>0.006</td>\n",
       "      <td>-0.003</td>\n",
       "      <td>-0.000</td>\n",
       "      <td>-0.060</td>\n",
       "      <td>1.000</td>\n",
       "      <td>-0.058</td>\n",
       "      <td>-0.024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>type_PAYMENT</th>\n",
       "      <td>0.005</td>\n",
       "      <td>-0.197</td>\n",
       "      <td>-0.189</td>\n",
       "      <td>-0.194</td>\n",
       "      <td>-0.231</td>\n",
       "      <td>-0.238</td>\n",
       "      <td>-0.026</td>\n",
       "      <td>-0.001</td>\n",
       "      <td>-0.526</td>\n",
       "      <td>-0.058</td>\n",
       "      <td>1.000</td>\n",
       "      <td>-0.216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>type_TRANSFER</th>\n",
       "      <td>0.007</td>\n",
       "      <td>0.366</td>\n",
       "      <td>-0.082</td>\n",
       "      <td>-0.087</td>\n",
       "      <td>0.130</td>\n",
       "      <td>0.192</td>\n",
       "      <td>0.054</td>\n",
       "      <td>0.005</td>\n",
       "      <td>-0.223</td>\n",
       "      <td>-0.024</td>\n",
       "      <td>-0.216</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 step  amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n",
       "step            1.000   0.022         -0.010          -0.010           0.028   \n",
       "amount          0.022   1.000         -0.003          -0.008           0.294   \n",
       "oldbalanceOrg  -0.010  -0.003          1.000           0.999           0.066   \n",
       "newbalanceOrig -0.010  -0.008          0.999           1.000           0.068   \n",
       "oldbalanceDest  0.028   0.294          0.066           0.068           1.000   \n",
       "newbalanceDest  0.026   0.459          0.042           0.042           0.977   \n",
       "isFraud         0.032   0.077          0.010          -0.008          -0.006   \n",
       "isFlaggedFraud  0.003   0.012          0.004           0.004          -0.001   \n",
       "type_CASH_OUT  -0.013  -0.004         -0.201          -0.211           0.086   \n",
       "type_DEBIT      0.003  -0.023         -0.021          -0.022           0.009   \n",
       "type_PAYMENT    0.005  -0.197         -0.189          -0.194          -0.231   \n",
       "type_TRANSFER   0.007   0.366         -0.082          -0.087           0.130   \n",
       "\n",
       "                newbalanceDest  isFraud  isFlaggedFraud  type_CASH_OUT  \\\n",
       "step                     0.026    0.032           0.003         -0.013   \n",
       "amount                   0.459    0.077           0.012         -0.004   \n",
       "oldbalanceOrg            0.042    0.010           0.004         -0.201   \n",
       "newbalanceOrig           0.042   -0.008           0.004         -0.211   \n",
       "oldbalanceDest           0.977   -0.006          -0.001          0.086   \n",
       "newbalanceDest           1.000    0.001          -0.001          0.093   \n",
       "isFraud                  0.001    1.000           0.044          0.011   \n",
       "isFlaggedFraud          -0.001    0.044           1.000         -0.001   \n",
       "type_CASH_OUT            0.093    0.011          -0.001          1.000   \n",
       "type_DEBIT               0.006   -0.003          -0.000         -0.060   \n",
       "type_PAYMENT            -0.238   -0.026          -0.001         -0.526   \n",
       "type_TRANSFER            0.192    0.054           0.005         -0.223   \n",
       "\n",
       "                type_DEBIT  type_PAYMENT  type_TRANSFER  \n",
       "step                 0.003         0.005          0.007  \n",
       "amount              -0.023        -0.197          0.366  \n",
       "oldbalanceOrg       -0.021        -0.189         -0.082  \n",
       "newbalanceOrig      -0.022        -0.194         -0.087  \n",
       "oldbalanceDest       0.009        -0.231          0.130  \n",
       "newbalanceDest       0.006        -0.238          0.192  \n",
       "isFraud             -0.003        -0.026          0.054  \n",
       "isFlaggedFraud      -0.000        -0.001          0.005  \n",
       "type_CASH_OUT       -0.060        -0.526         -0.223  \n",
       "type_DEBIT           1.000        -0.058         -0.024  \n",
       "type_PAYMENT        -0.058         1.000         -0.216  \n",
       "type_TRANSFER       -0.024        -0.216          1.000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#old and new balances are very highly correlated, so drop old and just keep new balances for orig and destination\n",
    "df = df.drop(['oldbalanceOrg', 'oldbalanceDest'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create filter function to filter by valid vs fraud transcations\n",
    "def cat_filter(df, category, cat_filter):\n",
    "    cat_filter = df.loc[df[category]== cat_filter]\n",
    "    return cat_filter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Real = 6354407\n",
      "Fake = 8213\n",
      "Percentage of transactions that are fraud: 0.129082\n"
     ]
    }
   ],
   "source": [
    "real = cat_filter(df, 'isFraud', 0)['isFraud'].count()\n",
    "fake = cat_filter(df, 'isFraud', 1)['isFraud'].count()\n",
    "\n",
    "percent_fraud = fake/(real+fake)\n",
    "\n",
    "print('Real =', real)\n",
    "print('Fake =', fake)\n",
    "print('Percentage of transactions that are fraud: {:.6f}'.format(percent_fraud*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "names='Authentic', 'Fraud'\n",
    "size=[real, fake]\n",
    "\n",
    "fig = plt.figure()\n",
    "fig.patch.set_facecolor('black')\n",
    "plt.rcParams['text.color'] = 'white'\n",
    "\n",
    "# Create a circle for the center of the plot\n",
    "my_circle=plt.Circle( (0,0), 0.7, color='black')\n",
    "\n",
    "plt.pie(size, labels=names, colors=['skyblue', 'red'])\n",
    "p=plt.gcf()\n",
    "p.gca().add_artist(my_circle)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Somali shilling (SOS) conversion to dollars (USD)\n",
    "df['amount_us'] = df['amount']/578.002\n",
    "\n",
    "#remove original amount column after value conversion\n",
    "df = df.drop('amount', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"Amount\" stats:\n",
      "Min: 0.00\n",
      "Max: 159939.79\n",
      "# Values: 6362620\n"
     ]
    }
   ],
   "source": [
    "print('\"Amount\" stats:')\n",
    "print('Min: {:.2f}'.format(df['amount_us'].min()))\n",
    "print('Max: {:.2f}'.format(df['amount_us'].max()))\n",
    "print('# Values: {:.0f}'.format(df['amount_us'].count()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.lmplot(x='step', y='amount_us', hue='isFraud', data=df, fit_reg=False, legend=True)\n",
    "fig = plt.gcf()\n",
    "fig.set_size_inches(15, 10)\n",
    "plt.show()\n",
    "\n",
    "#where 'step'=time? check to see how many values there are for this variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#under sampling method - generate multiple small datasets of 16,426 transactions\n",
    "#use 80% of fraud transactions (with 20% reserved as a final test set) & same number of random valid samples\n",
    "\n",
    "fraud_count = len(df[df.isFraud == 1])\n",
    "fraud_sample_count = int(len(df[df.isFraud == 1])*0.8)\n",
    "\n",
    "#collect all valid transactions for random use in balanced datasets\n",
    "valid_indices = df[df.isFraud == 0].index\n",
    "\n",
    "#collect all fraud transactions and set 20% aside for a final test\n",
    "fraud_indices = df[df.isFraud == 1].index\n",
    "fraud_train = fraud_indices[:fraud_sample_count]  #6570 samples used in every training dataset\n",
    "fraud_test = fraud_indices[fraud_sample_count:]   #1643 samples set aside for a final test dataset\n",
    "\n",
    "data_num = 25\n",
    "data_sample_under = dict()\n",
    "\n",
    "#generate small random datasets for training purposes using UNDERSAMPLING\n",
    "for i in range (0,data_num):\n",
    "    random_ind_under = np.random.choice(valid_indices, fraud_sample_count, replace=False)  #random sample of valid indices\n",
    "    under_sample_ind = np.concatenate([fraud_train, random_ind_under])\n",
    "    data_sample_under[i] = df.loc[under_sample_ind]\n",
    "    \n",
    "#generate final testing dataset\n",
    "random_ind_under = np.random.choice(valid_indices, math.ceil(fraud_count*0.2), replace=False)  #random sample of valid indices\n",
    "under_sample_ind = np.concatenate([fraud_test, random_ind_under])\n",
    "testing_sample = df.loc[under_sample_ind]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Real = 6570\n",
      "Fake = 6570\n",
      "Percentage of transactions that are fraud: 50.000000\n"
     ]
    }
   ],
   "source": [
    "real = cat_filter(data_sample_under[0], 'isFraud', 0)['isFraud'].count()\n",
    "fake = cat_filter(data_sample_under[0], 'isFraud', 1)['isFraud'].count()\n",
    "percent_fraud = fake/(real+fake)\n",
    "\n",
    "print('Real =', real)\n",
    "print('Fake =', fake)\n",
    "print('Percentage of transactions that are fraud: {:.6f}'.format(percent_fraud*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Real = 1643\n",
      "Fake = 1643\n",
      "Percentage of transactions that are fraud: 50.000000\n"
     ]
    }
   ],
   "source": [
    "real = cat_filter(testing_sample, 'isFraud', 0)['isFraud'].count()\n",
    "fake = cat_filter(testing_sample, 'isFraud', 1)['isFraud'].count()\n",
    "percent_fraud = fake/(real+fake)\n",
    "\n",
    "print('Real =', real)\n",
    "print('Fake =', fake)\n",
    "print('Percentage of transactions that are fraud: {:.6f}'.format(percent_fraud*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13140 entries, 2 to 2851205\n",
      "Data columns (total 10 columns):\n",
      "step              13140 non-null int64\n",
      "newbalanceOrig    13140 non-null float64\n",
      "newbalanceDest    13140 non-null float64\n",
      "isFraud           13140 non-null int64\n",
      "isFlaggedFraud    13140 non-null int64\n",
      "type_CASH_OUT     13140 non-null uint8\n",
      "type_DEBIT        13140 non-null uint8\n",
      "type_PAYMENT      13140 non-null uint8\n",
      "type_TRANSFER     13140 non-null uint8\n",
      "amount_us         13140 non-null float64\n",
      "dtypes: float64(3), int64(3), uint8(4)\n",
      "memory usage: 769.9 KB\n"
     ]
    }
   ],
   "source": [
    "data_sample_under[0].info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaling = StandardScaler()\n",
    "pca = PCA()\n",
    "\n",
    "obs_train = dict()\n",
    "obs_test = dict()\n",
    "matrix = dict()\n",
    "report = dict()\n",
    "tn = dict()\n",
    "fp = dict()\n",
    "fn = dict()\n",
    "tp = dict()\n",
    "acc = dict()\n",
    "precision = dict()\n",
    "recall = dict()\n",
    "f1 = dict()\n",
    "X = dict()\n",
    "y = dict()\n",
    "\n",
    "for i in range(0, len(data_sample_under)):\n",
    "    X[i] = data_sample_under[i].drop(columns=['isFraud'])\n",
    "    y[i] = data_sample_under[i]['isFraud']\n",
    "    X[i] = scaling.fit_transform(X[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- 17.82 seconds ---\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = LinearSVC(max_iter=2000)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*(precision[i]*recall[i]))/((precision[i] + recall[i]))\n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1177  515]\n",
      " [ 137 1456]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.70      0.78      1692\n",
      "           1       0.74      0.91      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.80      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1177\n",
      "False Positives:  515\n",
      "False Negatives:  137\n",
      "True Positives:  1456\n",
      "Accuracy:  0.8015220700152207\n",
      "Precision 0.74\n",
      "Recall 0.91\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1201  491]\n",
      " [ 147 1446]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.71      0.79      1692\n",
      "           1       0.75      0.91      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.81      0.80      3285\n",
      "weighted avg       0.82      0.81      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1201\n",
      "False Positives:  491\n",
      "False Negatives:  147\n",
      "True Positives:  1446\n",
      "Accuracy:  0.8057838660578387\n",
      "Precision 0.75\n",
      "Recall 0.91\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1182  510]\n",
      " [ 134 1459]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.70      0.79      1692\n",
      "           1       0.74      0.92      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.81      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1182\n",
      "False Positives:  510\n",
      "False Negatives:  134\n",
      "True Positives:  1459\n",
      "Accuracy:  0.8039573820395738\n",
      "Precision 0.74\n",
      "Recall 0.92\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1159  533]\n",
      " [ 108 1485]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.68      0.78      1692\n",
      "           1       0.74      0.93      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.83      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1159\n",
      "False Positives:  533\n",
      "False Negatives:  108\n",
      "True Positives:  1485\n",
      "Accuracy:  0.8048706240487062\n",
      "Precision 0.74\n",
      "Recall 0.93\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1157  535]\n",
      " [ 115 1478]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.68      0.78      1692\n",
      "           1       0.73      0.93      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.81      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1157\n",
      "False Positives:  535\n",
      "False Negatives:  115\n",
      "True Positives:  1478\n",
      "Accuracy:  0.802130898021309\n",
      "Precision 0.73\n",
      "Recall 0.93\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1197  495]\n",
      " [ 128 1465]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.71      0.79      1692\n",
      "           1       0.75      0.92      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.83      0.81      0.81      3285\n",
      "weighted avg       0.83      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1197\n",
      "False Positives:  495\n",
      "False Negatives:  128\n",
      "True Positives:  1465\n",
      "Accuracy:  0.8103500761035007\n",
      "Precision 0.75\n",
      "Recall 0.92\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1163  529]\n",
      " [ 121 1472]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.69      0.78      1692\n",
      "           1       0.74      0.92      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.81      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1163\n",
      "False Positives:  529\n",
      "False Negatives:  121\n",
      "True Positives:  1472\n",
      "Accuracy:  0.802130898021309\n",
      "Precision 0.74\n",
      "Recall 0.92\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1176  516]\n",
      " [ 115 1478]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.70      0.79      1692\n",
      "           1       0.74      0.93      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.83      0.81      0.81      3285\n",
      "weighted avg       0.83      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1176\n",
      "False Positives:  516\n",
      "False Negatives:  115\n",
      "True Positives:  1478\n",
      "Accuracy:  0.8079147640791476\n",
      "Precision 0.74\n",
      "Recall 0.93\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1115  577]\n",
      " [  92 1501]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.66      0.77      1692\n",
      "           1       0.72      0.94      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1115\n",
      "False Positives:  577\n",
      "False Negatives:  92\n",
      "True Positives:  1501\n",
      "Accuracy:  0.7963470319634703\n",
      "Precision 0.72\n",
      "Recall 0.94\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1190  502]\n",
      " [ 146 1447]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.70      0.79      1692\n",
      "           1       0.74      0.91      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.81      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1190\n",
      "False Positives:  502\n",
      "False Negatives:  146\n",
      "True Positives:  1447\n",
      "Accuracy:  0.8027397260273973\n",
      "Precision 0.74\n",
      "Recall 0.91\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1164  528]\n",
      " [ 109 1484]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.69      0.79      1692\n",
      "           1       0.74      0.93      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.83      0.81      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1164\n",
      "False Positives:  528\n",
      "False Negatives:  109\n",
      "True Positives:  1484\n",
      "Accuracy:  0.8060882800608828\n",
      "Precision 0.74\n",
      "Recall 0.93\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1190  502]\n",
      " [ 134 1459]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.70      0.79      1692\n",
      "           1       0.74      0.92      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.81      0.81      3285\n",
      "weighted avg       0.82      0.81      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1190\n",
      "False Positives:  502\n",
      "False Negatives:  134\n",
      "True Positives:  1459\n",
      "Accuracy:  0.806392694063927\n",
      "Precision 0.74\n",
      "Recall 0.92\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1113  579]\n",
      " [  92 1501]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.66      0.77      1692\n",
      "           1       0.72      0.94      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1113\n",
      "False Positives:  579\n",
      "False Negatives:  92\n",
      "True Positives:  1501\n",
      "Accuracy:  0.795738203957382\n",
      "Precision 0.72\n",
      "Recall 0.94\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1151  541]\n",
      " [ 121 1472]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.68      0.78      1692\n",
      "           1       0.73      0.92      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.80      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1151\n",
      "False Positives:  541\n",
      "False Negatives:  121\n",
      "True Positives:  1472\n",
      "Accuracy:  0.7984779299847793\n",
      "Precision 0.73\n",
      "Recall 0.92\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1180  512]\n",
      " [ 133 1460]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.70      0.79      1692\n",
      "           1       0.74      0.92      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.81      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1180\n",
      "False Positives:  512\n",
      "False Negatives:  133\n",
      "True Positives:  1460\n",
      "Accuracy:  0.8036529680365296\n",
      "Precision 0.74\n",
      "Recall 0.92\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1199  493]\n",
      " [ 142 1451]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.71      0.79      1692\n",
      "           1       0.75      0.91      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.81      0.81      3285\n",
      "weighted avg       0.82      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1199\n",
      "False Positives:  493\n",
      "False Negatives:  142\n",
      "True Positives:  1451\n",
      "Accuracy:  0.806697108066971\n",
      "Precision 0.75\n",
      "Recall 0.91\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1169  523]\n",
      " [ 139 1454]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.69      0.78      1692\n",
      "           1       0.74      0.91      0.81      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.81      0.80      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1169\n",
      "False Positives:  523\n",
      "False Negatives:  139\n",
      "True Positives:  1454\n",
      "Accuracy:  0.7984779299847793\n",
      "Precision 0.74\n",
      "Recall 0.91\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1134  558]\n",
      " [ 107 1486]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.67      0.77      1692\n",
      "           1       0.73      0.93      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.80      0.80      3285\n",
      "weighted avg       0.82      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1134\n",
      "False Positives:  558\n",
      "False Negatives:  107\n",
      "True Positives:  1486\n",
      "Accuracy:  0.7975646879756468\n",
      "Precision 0.73\n",
      "Recall 0.93\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1184  508]\n",
      " [ 148 1445]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.70      0.78      1692\n",
      "           1       0.74      0.91      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.81      0.80      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1184\n",
      "False Positives:  508\n",
      "False Negatives:  148\n",
      "True Positives:  1445\n",
      "Accuracy:  0.8003044140030442\n",
      "Precision 0.74\n",
      "Recall 0.91\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1108  584]\n",
      " [ 109 1484]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.65      0.76      1692\n",
      "           1       0.72      0.93      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.81      0.79      0.79      3285\n",
      "weighted avg       0.82      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1108\n",
      "False Positives:  584\n",
      "False Negatives:  109\n",
      "True Positives:  1484\n",
      "Accuracy:  0.7890410958904109\n",
      "Precision 0.72\n",
      "Recall 0.93\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1133  559]\n",
      " [  95 1498]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.67      0.78      1692\n",
      "           1       0.73      0.94      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.80      3285\n",
      "weighted avg       0.83      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1133\n",
      "False Positives:  559\n",
      "False Negatives:  95\n",
      "True Positives:  1498\n",
      "Accuracy:  0.8009132420091324\n",
      "Precision 0.73\n",
      "Recall 0.94\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1184  508]\n",
      " [ 126 1467]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.70      0.79      1692\n",
      "           1       0.74      0.92      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.81      0.81      3285\n",
      "weighted avg       0.83      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1184\n",
      "False Positives:  508\n",
      "False Negatives:  126\n",
      "True Positives:  1467\n",
      "Accuracy:  0.8070015220700152\n",
      "Precision 0.74\n",
      "Recall 0.92\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1170  522]\n",
      " [ 135 1458]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.69      0.78      1692\n",
      "           1       0.74      0.92      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.80      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1170\n",
      "False Positives:  522\n",
      "False Negatives:  135\n",
      "True Positives:  1458\n",
      "Accuracy:  0.8\n",
      "Precision 0.74\n",
      "Recall 0.92\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1110  582]\n",
      " [  95 1498]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.66      0.77      1692\n",
      "           1       0.72      0.94      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.82      0.80      0.79      3285\n",
      "weighted avg       0.82      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1110\n",
      "False Positives:  582\n",
      "False Negatives:  95\n",
      "True Positives:  1498\n",
      "Accuracy:  0.7939117199391172\n",
      "Precision 0.72\n",
      "Recall 0.94\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1176  516]\n",
      " [ 117 1476]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.70      0.79      1692\n",
      "           1       0.74      0.93      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.83      0.81      0.81      3285\n",
      "weighted avg       0.83      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1176\n",
      "False Positives:  516\n",
      "False Negatives:  117\n",
      "True Positives:  1476\n",
      "Accuracy:  0.8073059360730593\n",
      "Precision 0.74\n",
      "Recall 0.93\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 80.20\n",
      "Ave recall = 92.35\n",
      "Ave precision = 73.58\n",
      "Ave F1 = 81.90\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- 1.49 seconds ---\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:929: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = LinearSVC(max_iter=3000, tol=1e-5, loss='hinge')\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*precision[i]*recall[i])/(precision[i] + recall[i])\n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1081  611]\n",
      " [  65 1528]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1081\n",
      "False Positives:  611\n",
      "False Negatives:  65\n",
      "True Positives:  1528\n",
      "Accuracy:  0.7942161339421613\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1116  576]\n",
      " [  73 1520]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.66      0.77      1692\n",
      "           1       0.73      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1116\n",
      "False Positives:  576\n",
      "False Negatives:  73\n",
      "True Positives:  1520\n",
      "Accuracy:  0.8024353120243531\n",
      "Precision 0.73\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1088  604]\n",
      " [  63 1530]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1088\n",
      "False Positives:  604\n",
      "False Negatives:  63\n",
      "True Positives:  1530\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1087  605]\n",
      " [  63 1530]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.76      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1087\n",
      "False Positives:  605\n",
      "False Negatives:  63\n",
      "True Positives:  1530\n",
      "Accuracy:  0.7966514459665145\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1062  630]\n",
      " [  53 1540]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.76      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1062\n",
      "False Positives:  630\n",
      "False Negatives:  53\n",
      "True Positives:  1540\n",
      "Accuracy:  0.7920852359208523\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1095  597]\n",
      " [  69 1524]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1095\n",
      "False Positives:  597\n",
      "False Negatives:  69\n",
      "True Positives:  1524\n",
      "Accuracy:  0.7972602739726027\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1082  610]\n",
      " [  63 1530]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1082\n",
      "False Positives:  610\n",
      "False Negatives:  63\n",
      "True Positives:  1530\n",
      "Accuracy:  0.7951293759512937\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1094  598]\n",
      " [  59 1534]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1094\n",
      "False Positives:  598\n",
      "False Negatives:  59\n",
      "True Positives:  1534\n",
      "Accuracy:  0.8\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1021  671]\n",
      " [  52 1541]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.60      0.74      1692\n",
      "           1       0.70      0.97      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.82      0.79      0.77      3285\n",
      "weighted avg       0.83      0.78      0.77      3285\n",
      "\n",
      "\n",
      "True Negatives:  1021\n",
      "False Positives:  671\n",
      "False Negatives:  52\n",
      "True Positives:  1541\n",
      "Accuracy:  0.7799086757990867\n",
      "Precision 0.70\n",
      "Recall 0.97\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1070  622]\n",
      " [  66 1527]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1070\n",
      "False Positives:  622\n",
      "False Negatives:  66\n",
      "True Positives:  1527\n",
      "Accuracy:  0.7905631659056317\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1078  614]\n",
      " [  59 1534]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1078\n",
      "False Positives:  614\n",
      "False Negatives:  59\n",
      "True Positives:  1534\n",
      "Accuracy:  0.7951293759512937\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1115  577]\n",
      " [  72 1521]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.66      0.77      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1115\n",
      "False Positives:  577\n",
      "False Negatives:  72\n",
      "True Positives:  1521\n",
      "Accuracy:  0.8024353120243531\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1049  643]\n",
      " [  53 1540]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.62      0.75      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1049\n",
      "False Positives:  643\n",
      "False Negatives:  53\n",
      "True Positives:  1540\n",
      "Accuracy:  0.7881278538812785\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1074  618]\n",
      " [  61 1532]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1074\n",
      "False Positives:  618\n",
      "False Negatives:  61\n",
      "True Positives:  1532\n",
      "Accuracy:  0.7933028919330289\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1098  594]\n",
      " [  53 1540]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.65      0.77      1692\n",
      "           1       0.72      0.97      0.83      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.84      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1098\n",
      "False Positives:  594\n",
      "False Negatives:  53\n",
      "True Positives:  1540\n",
      "Accuracy:  0.8030441400304414\n",
      "Precision 0.72\n",
      "Recall 0.97\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1098  594]\n",
      " [  67 1526]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.80      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1098\n",
      "False Positives:  594\n",
      "False Negatives:  67\n",
      "True Positives:  1526\n",
      "Accuracy:  0.7987823439878234\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1062  630]\n",
      " [  71 1522]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.75      1692\n",
      "           1       0.71      0.96      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1062\n",
      "False Positives:  630\n",
      "False Negatives:  71\n",
      "True Positives:  1522\n",
      "Accuracy:  0.7866057838660578\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1039  653]\n",
      " [  54 1539]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.61      0.75      1692\n",
      "           1       0.70      0.97      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.83      0.78      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1039\n",
      "False Positives:  653\n",
      "False Negatives:  54\n",
      "True Positives:  1539\n",
      "Accuracy:  0.784779299847793\n",
      "Precision 0.70\n",
      "Recall 0.97\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1090  602]\n",
      " [  75 1518]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1090\n",
      "False Positives:  602\n",
      "False Negatives:  75\n",
      "True Positives:  1518\n",
      "Accuracy:  0.7939117199391172\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1033  659]\n",
      " [  59 1534]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.61      0.74      1692\n",
      "           1       0.70      0.96      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.83      0.78      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1033\n",
      "False Positives:  659\n",
      "False Negatives:  59\n",
      "True Positives:  1534\n",
      "Accuracy:  0.7814307458143075\n",
      "Precision 0.70\n",
      "Recall 0.96\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1058  634]\n",
      " [  56 1537]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.75      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1058\n",
      "False Positives:  634\n",
      "False Negatives:  56\n",
      "True Positives:  1537\n",
      "Accuracy:  0.7899543378995434\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1092  600]\n",
      " [  66 1527]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1092\n",
      "False Positives:  600\n",
      "False Negatives:  66\n",
      "True Positives:  1527\n",
      "Accuracy:  0.7972602739726027\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1071  621]\n",
      " [  66 1527]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1071\n",
      "False Positives:  621\n",
      "False Negatives:  66\n",
      "True Positives:  1527\n",
      "Accuracy:  0.7908675799086758\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1049  643]\n",
      " [  60 1533]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.62      0.75      1692\n",
      "           1       0.70      0.96      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1049\n",
      "False Positives:  643\n",
      "False Negatives:  60\n",
      "True Positives:  1533\n",
      "Accuracy:  0.7859969558599695\n",
      "Precision 0.70\n",
      "Recall 0.96\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1087  605]\n",
      " [  62 1531]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1087\n",
      "False Positives:  605\n",
      "False Negatives:  62\n",
      "True Positives:  1531\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 79.34\n",
      "Ave recall = 96.08\n",
      "Ave precision = 71.30\n",
      "Ave F1 = 81.85\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "--- 76.35 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = SVC(kernel='linear', C=1)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*precision[i]*recall[i])/(precision[i] + recall[i])\n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1081  611]\n",
      " [  65 1528]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1081\n",
      "False Positives:  611\n",
      "False Negatives:  65\n",
      "True Positives:  1528\n",
      "Accuracy:  0.7942161339421613\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1116  576]\n",
      " [  73 1520]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.66      0.77      1692\n",
      "           1       0.73      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1116\n",
      "False Positives:  576\n",
      "False Negatives:  73\n",
      "True Positives:  1520\n",
      "Accuracy:  0.8024353120243531\n",
      "Precision 0.73\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1088  604]\n",
      " [  63 1530]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1088\n",
      "False Positives:  604\n",
      "False Negatives:  63\n",
      "True Positives:  1530\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1087  605]\n",
      " [  63 1530]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.76      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1087\n",
      "False Positives:  605\n",
      "False Negatives:  63\n",
      "True Positives:  1530\n",
      "Accuracy:  0.7966514459665145\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1062  630]\n",
      " [  53 1540]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.76      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1062\n",
      "False Positives:  630\n",
      "False Negatives:  53\n",
      "True Positives:  1540\n",
      "Accuracy:  0.7920852359208523\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1095  597]\n",
      " [  69 1524]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1095\n",
      "False Positives:  597\n",
      "False Negatives:  69\n",
      "True Positives:  1524\n",
      "Accuracy:  0.7972602739726027\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1083  609]\n",
      " [  63 1530]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.76      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1083\n",
      "False Positives:  609\n",
      "False Negatives:  63\n",
      "True Positives:  1530\n",
      "Accuracy:  0.7954337899543379\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1096  596]\n",
      " [  59 1534]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1096\n",
      "False Positives:  596\n",
      "False Negatives:  59\n",
      "True Positives:  1534\n",
      "Accuracy:  0.8006088280060882\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1020  672]\n",
      " [  51 1542]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.60      0.74      1692\n",
      "           1       0.70      0.97      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.82      0.79      0.77      3285\n",
      "weighted avg       0.83      0.78      0.77      3285\n",
      "\n",
      "\n",
      "True Negatives:  1020\n",
      "False Positives:  672\n",
      "False Negatives:  51\n",
      "True Positives:  1542\n",
      "Accuracy:  0.7799086757990867\n",
      "Precision 0.70\n",
      "Recall 0.97\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1070  622]\n",
      " [  66 1527]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1070\n",
      "False Positives:  622\n",
      "False Negatives:  66\n",
      "True Positives:  1527\n",
      "Accuracy:  0.7905631659056317\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1082  610]\n",
      " [  57 1536]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.76      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.84      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1082\n",
      "False Positives:  610\n",
      "False Negatives:  57\n",
      "True Positives:  1536\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1114  578]\n",
      " [  72 1521]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.66      0.77      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1114\n",
      "False Positives:  578\n",
      "False Negatives:  72\n",
      "True Positives:  1521\n",
      "Accuracy:  0.802130898021309\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1049  643]\n",
      " [  53 1540]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.62      0.75      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1049\n",
      "False Positives:  643\n",
      "False Negatives:  53\n",
      "True Positives:  1540\n",
      "Accuracy:  0.7881278538812785\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1074  618]\n",
      " [  61 1532]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1074\n",
      "False Positives:  618\n",
      "False Negatives:  61\n",
      "True Positives:  1532\n",
      "Accuracy:  0.7933028919330289\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1094  598]\n",
      " [  53 1540]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.65      0.77      1692\n",
      "           1       0.72      0.97      0.83      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.84      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1094\n",
      "False Positives:  598\n",
      "False Negatives:  53\n",
      "True Positives:  1540\n",
      "Accuracy:  0.8018264840182648\n",
      "Precision 0.72\n",
      "Recall 0.97\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1098  594]\n",
      " [  67 1526]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.80      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1098\n",
      "False Positives:  594\n",
      "False Negatives:  67\n",
      "True Positives:  1526\n",
      "Accuracy:  0.7987823439878234\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1062  630]\n",
      " [  72 1521]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.75      1692\n",
      "           1       0.71      0.95      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1062\n",
      "False Positives:  630\n",
      "False Negatives:  72\n",
      "True Positives:  1521\n",
      "Accuracy:  0.7863013698630137\n",
      "Precision 0.71\n",
      "Recall 0.95\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1039  653]\n",
      " [  54 1539]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.61      0.75      1692\n",
      "           1       0.70      0.97      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.83      0.78      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1039\n",
      "False Positives:  653\n",
      "False Negatives:  54\n",
      "True Positives:  1539\n",
      "Accuracy:  0.784779299847793\n",
      "Precision 0.70\n",
      "Recall 0.97\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1091  601]\n",
      " [  75 1518]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1091\n",
      "False Positives:  601\n",
      "False Negatives:  75\n",
      "True Positives:  1518\n",
      "Accuracy:  0.7942161339421613\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1033  659]\n",
      " [  57 1536]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.61      0.74      1692\n",
      "           1       0.70      0.96      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.83      0.78      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1033\n",
      "False Positives:  659\n",
      "False Negatives:  57\n",
      "True Positives:  1536\n",
      "Accuracy:  0.7820395738203957\n",
      "Precision 0.70\n",
      "Recall 0.96\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1058  634]\n",
      " [  56 1537]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.75      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1058\n",
      "False Positives:  634\n",
      "False Negatives:  56\n",
      "True Positives:  1537\n",
      "Accuracy:  0.7899543378995434\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1092  600]\n",
      " [  67 1526]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1092\n",
      "False Positives:  600\n",
      "False Negatives:  67\n",
      "True Positives:  1526\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1071  621]\n",
      " [  66 1527]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1071\n",
      "False Positives:  621\n",
      "False Negatives:  66\n",
      "True Positives:  1527\n",
      "Accuracy:  0.7908675799086758\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1049  643]\n",
      " [  61 1532]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.62      0.75      1692\n",
      "           1       0.70      0.96      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1049\n",
      "False Positives:  643\n",
      "False Negatives:  61\n",
      "True Positives:  1532\n",
      "Accuracy:  0.7856925418569254\n",
      "Precision 0.70\n",
      "Recall 0.96\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1087  605]\n",
      " [  62 1531]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1087\n",
      "False Positives:  605\n",
      "False Negatives:  62\n",
      "True Positives:  1531\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 79.34\n",
      "Ave recall = 96.09\n",
      "Ave precision = 71.30\n",
      "Ave F1 = 81.86\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- 62.25 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = SVC(kernel='sigmoid')\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*precision[i]*recall[i])/(precision[i] + recall[i])\n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1254  438]\n",
      " [ 382 1211]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.74      0.75      1692\n",
      "           1       0.73      0.76      0.75      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1254\n",
      "False Positives:  438\n",
      "False Negatives:  382\n",
      "True Positives:  1211\n",
      "Accuracy:  0.7503805175038052\n",
      "Precision 0.73\n",
      "Recall 0.76\n",
      "F1 Score 0.75\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1270  422]\n",
      " [ 384 1209]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.75      0.76      1692\n",
      "           1       0.74      0.76      0.75      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1270\n",
      "False Positives:  422\n",
      "False Negatives:  384\n",
      "True Positives:  1209\n",
      "Accuracy:  0.7546423135464231\n",
      "Precision 0.74\n",
      "Recall 0.76\n",
      "F1 Score 0.75\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1243  449]\n",
      " [ 386 1207]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.73      0.75      1692\n",
      "           1       0.73      0.76      0.74      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1243\n",
      "False Positives:  449\n",
      "False Negatives:  386\n",
      "True Positives:  1207\n",
      "Accuracy:  0.745814307458143\n",
      "Precision 0.73\n",
      "Recall 0.76\n",
      "F1 Score 0.74\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1268  424]\n",
      " [ 384 1209]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.75      0.76      1692\n",
      "           1       0.74      0.76      0.75      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1268\n",
      "False Positives:  424\n",
      "False Negatives:  384\n",
      "True Positives:  1209\n",
      "Accuracy:  0.7540334855403349\n",
      "Precision 0.74\n",
      "Recall 0.76\n",
      "F1 Score 0.75\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1233  459]\n",
      " [ 407 1186]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.73      0.74      1692\n",
      "           1       0.72      0.74      0.73      1593\n",
      "\n",
      "    accuracy                           0.74      3285\n",
      "   macro avg       0.74      0.74      0.74      3285\n",
      "weighted avg       0.74      0.74      0.74      3285\n",
      "\n",
      "\n",
      "True Negatives:  1233\n",
      "False Positives:  459\n",
      "False Negatives:  407\n",
      "True Positives:  1186\n",
      "Accuracy:  0.7363774733637747\n",
      "Precision 0.72\n",
      "Recall 0.74\n",
      "F1 Score 0.73\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1249  443]\n",
      " [ 381 1212]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.74      0.75      1692\n",
      "           1       0.73      0.76      0.75      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1249\n",
      "False Positives:  443\n",
      "False Negatives:  381\n",
      "True Positives:  1212\n",
      "Accuracy:  0.7491628614916286\n",
      "Precision 0.73\n",
      "Recall 0.76\n",
      "F1 Score 0.75\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1242  450]\n",
      " [ 388 1205]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.73      0.75      1692\n",
      "           1       0.73      0.76      0.74      1593\n",
      "\n",
      "    accuracy                           0.74      3285\n",
      "   macro avg       0.75      0.75      0.74      3285\n",
      "weighted avg       0.75      0.74      0.74      3285\n",
      "\n",
      "\n",
      "True Negatives:  1242\n",
      "False Positives:  450\n",
      "False Negatives:  388\n",
      "True Positives:  1205\n",
      "Accuracy:  0.7449010654490107\n",
      "Precision 0.73\n",
      "Recall 0.76\n",
      "F1 Score 0.74\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1261  431]\n",
      " [ 382 1211]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.75      0.76      1692\n",
      "           1       0.74      0.76      0.75      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1261\n",
      "False Positives:  431\n",
      "False Negatives:  382\n",
      "True Positives:  1211\n",
      "Accuracy:  0.7525114155251141\n",
      "Precision 0.74\n",
      "Recall 0.76\n",
      "F1 Score 0.75\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1343  349]\n",
      " [ 305 1288]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.79      0.80      1692\n",
      "           1       0.79      0.81      0.80      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.80      0.80      0.80      3285\n",
      "weighted avg       0.80      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1343\n",
      "False Positives:  349\n",
      "False Negatives:  305\n",
      "True Positives:  1288\n",
      "Accuracy:  0.8009132420091324\n",
      "Precision 0.79\n",
      "Recall 0.81\n",
      "F1 Score 0.80\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1253  439]\n",
      " [ 398 1195]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.74      0.75      1692\n",
      "           1       0.73      0.75      0.74      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1253\n",
      "False Positives:  439\n",
      "False Negatives:  398\n",
      "True Positives:  1195\n",
      "Accuracy:  0.7452054794520548\n",
      "Precision 0.73\n",
      "Recall 0.75\n",
      "F1 Score 0.74\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1242  450]\n",
      " [ 393 1200]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.73      0.75      1692\n",
      "           1       0.73      0.75      0.74      1593\n",
      "\n",
      "    accuracy                           0.74      3285\n",
      "   macro avg       0.74      0.74      0.74      3285\n",
      "weighted avg       0.74      0.74      0.74      3285\n",
      "\n",
      "\n",
      "True Negatives:  1242\n",
      "False Positives:  450\n",
      "False Negatives:  393\n",
      "True Positives:  1200\n",
      "Accuracy:  0.7433789954337899\n",
      "Precision 0.73\n",
      "Recall 0.75\n",
      "F1 Score 0.74\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1278  414]\n",
      " [ 401 1192]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.76      0.76      1692\n",
      "           1       0.74      0.75      0.75      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1278\n",
      "False Positives:  414\n",
      "False Negatives:  401\n",
      "True Positives:  1192\n",
      "Accuracy:  0.7519025875190258\n",
      "Precision 0.74\n",
      "Recall 0.75\n",
      "F1 Score 0.75\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1240  452]\n",
      " [ 386 1207]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.73      0.75      1692\n",
      "           1       0.73      0.76      0.74      1593\n",
      "\n",
      "    accuracy                           0.74      3285\n",
      "   macro avg       0.75      0.75      0.74      3285\n",
      "weighted avg       0.75      0.74      0.74      3285\n",
      "\n",
      "\n",
      "True Negatives:  1240\n",
      "False Positives:  452\n",
      "False Negatives:  386\n",
      "True Positives:  1207\n",
      "Accuracy:  0.7449010654490107\n",
      "Precision 0.73\n",
      "Recall 0.76\n",
      "F1 Score 0.74\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1335  357]\n",
      " [ 304 1289]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.79      0.80      1692\n",
      "           1       0.78      0.81      0.80      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.80      0.80      0.80      3285\n",
      "weighted avg       0.80      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1335\n",
      "False Positives:  357\n",
      "False Negatives:  304\n",
      "True Positives:  1289\n",
      "Accuracy:  0.7987823439878234\n",
      "Precision 0.78\n",
      "Recall 0.81\n",
      "F1 Score 0.80\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1396  296]\n",
      " [ 305 1288]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.83      0.82      1692\n",
      "           1       0.81      0.81      0.81      1593\n",
      "\n",
      "    accuracy                           0.82      3285\n",
      "   macro avg       0.82      0.82      0.82      3285\n",
      "weighted avg       0.82      0.82      0.82      3285\n",
      "\n",
      "\n",
      "True Negatives:  1396\n",
      "False Positives:  296\n",
      "False Negatives:  305\n",
      "True Positives:  1288\n",
      "Accuracy:  0.8170471841704718\n",
      "Precision 0.81\n",
      "Recall 0.81\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1254  438]\n",
      " [ 375 1218]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.74      0.76      1692\n",
      "           1       0.74      0.76      0.75      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1254\n",
      "False Positives:  438\n",
      "False Negatives:  375\n",
      "True Positives:  1218\n",
      "Accuracy:  0.7525114155251141\n",
      "Precision 0.74\n",
      "Recall 0.76\n",
      "F1 Score 0.75\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1247  445]\n",
      " [ 390 1203]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.74      0.75      1692\n",
      "           1       0.73      0.76      0.74      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1247\n",
      "False Positives:  445\n",
      "False Negatives:  390\n",
      "True Positives:  1203\n",
      "Accuracy:  0.745814307458143\n",
      "Precision 0.73\n",
      "Recall 0.76\n",
      "F1 Score 0.74\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1224  468]\n",
      " [ 383 1210]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.72      0.74      1692\n",
      "           1       0.72      0.76      0.74      1593\n",
      "\n",
      "    accuracy                           0.74      3285\n",
      "   macro avg       0.74      0.74      0.74      3285\n",
      "weighted avg       0.74      0.74      0.74      3285\n",
      "\n",
      "\n",
      "True Negatives:  1224\n",
      "False Positives:  468\n",
      "False Negatives:  383\n",
      "True Positives:  1210\n",
      "Accuracy:  0.7409436834094368\n",
      "Precision 0.72\n",
      "Recall 0.76\n",
      "F1 Score 0.74\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1366  326]\n",
      " [ 306 1287]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.81      0.81      1692\n",
      "           1       0.80      0.81      0.80      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.81      0.81      0.81      3285\n",
      "weighted avg       0.81      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1366\n",
      "False Positives:  326\n",
      "False Negatives:  306\n",
      "True Positives:  1287\n",
      "Accuracy:  0.8076103500761035\n",
      "Precision 0.80\n",
      "Recall 0.81\n",
      "F1 Score 0.80\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1190  502]\n",
      " [ 391 1202]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.70      0.73      1692\n",
      "           1       0.71      0.75      0.73      1593\n",
      "\n",
      "    accuracy                           0.73      3285\n",
      "   macro avg       0.73      0.73      0.73      3285\n",
      "weighted avg       0.73      0.73      0.73      3285\n",
      "\n",
      "\n",
      "True Negatives:  1190\n",
      "False Positives:  502\n",
      "False Negatives:  391\n",
      "True Positives:  1202\n",
      "Accuracy:  0.7281582952815829\n",
      "Precision 0.71\n",
      "Recall 0.75\n",
      "F1 Score 0.73\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1251  441]\n",
      " [ 383 1210]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.74      0.75      1692\n",
      "           1       0.73      0.76      0.75      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1251\n",
      "False Positives:  441\n",
      "False Negatives:  383\n",
      "True Positives:  1210\n",
      "Accuracy:  0.7491628614916286\n",
      "Precision 0.73\n",
      "Recall 0.76\n",
      "F1 Score 0.75\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1244  448]\n",
      " [ 392 1201]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.74      0.75      1692\n",
      "           1       0.73      0.75      0.74      1593\n",
      "\n",
      "    accuracy                           0.74      3285\n",
      "   macro avg       0.74      0.74      0.74      3285\n",
      "weighted avg       0.74      0.74      0.74      3285\n",
      "\n",
      "\n",
      "True Negatives:  1244\n",
      "False Positives:  448\n",
      "False Negatives:  392\n",
      "True Positives:  1201\n",
      "Accuracy:  0.7442922374429224\n",
      "Precision 0.73\n",
      "Recall 0.75\n",
      "F1 Score 0.74\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1346  346]\n",
      " [ 308 1285]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.80      0.80      1692\n",
      "           1       0.79      0.81      0.80      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.80      0.80      0.80      3285\n",
      "weighted avg       0.80      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1346\n",
      "False Positives:  346\n",
      "False Negatives:  308\n",
      "True Positives:  1285\n",
      "Accuracy:  0.8009132420091324\n",
      "Precision 0.79\n",
      "Recall 0.81\n",
      "F1 Score 0.80\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1242  450]\n",
      " [ 388 1205]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.73      0.75      1692\n",
      "           1       0.73      0.76      0.74      1593\n",
      "\n",
      "    accuracy                           0.74      3285\n",
      "   macro avg       0.75      0.75      0.74      3285\n",
      "weighted avg       0.75      0.74      0.74      3285\n",
      "\n",
      "\n",
      "True Negatives:  1242\n",
      "False Positives:  450\n",
      "False Negatives:  388\n",
      "True Positives:  1205\n",
      "Accuracy:  0.7449010654490107\n",
      "Precision 0.73\n",
      "Recall 0.76\n",
      "F1 Score 0.74\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1265  427]\n",
      " [ 386 1207]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.75      0.76      1692\n",
      "           1       0.74      0.76      0.75      1593\n",
      "\n",
      "    accuracy                           0.75      3285\n",
      "   macro avg       0.75      0.75      0.75      3285\n",
      "weighted avg       0.75      0.75      0.75      3285\n",
      "\n",
      "\n",
      "True Negatives:  1265\n",
      "False Positives:  427\n",
      "False Negatives:  386\n",
      "True Positives:  1207\n",
      "Accuracy:  0.7525114155251141\n",
      "Precision 0.74\n",
      "Recall 0.76\n",
      "F1 Score 0.75\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 75.83\n",
      "Ave recall = 76.68\n",
      "Ave precision = 74.32\n",
      "Ave F1 = 75.48\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 0 Best Parameters: {'C': 100, 'gamma': 1}\n",
      "\n",
      "Dataset 0 Best Estimators: SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n",
      "    probability=False, random_state=None, shrinking=True, tol=0.001,\n",
      "    verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 1 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 1 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 2 Best Parameters: {'C': 100, 'gamma': 1}\n",
      "\n",
      "Dataset 2 Best Estimators: SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n",
      "    probability=False, random_state=None, shrinking=True, tol=0.001,\n",
      "    verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 3 Best Parameters: {'C': 100, 'gamma': 1}\n",
      "\n",
      "Dataset 3 Best Estimators: SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n",
      "    probability=False, random_state=None, shrinking=True, tol=0.001,\n",
      "    verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 4 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 4 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 5 Best Parameters: {'C': 100, 'gamma': 1}\n",
      "\n",
      "Dataset 5 Best Estimators: SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n",
      "    probability=False, random_state=None, shrinking=True, tol=0.001,\n",
      "    verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 6 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 6 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 7 Best Parameters: {'C': 100, 'gamma': 1}\n",
      "\n",
      "Dataset 7 Best Estimators: SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n",
      "    probability=False, random_state=None, shrinking=True, tol=0.001,\n",
      "    verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 8 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 8 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.4min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 9 Best Parameters: {'C': 100, 'gamma': 1}\n",
      "\n",
      "Dataset 9 Best Estimators: SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n",
      "    probability=False, random_state=None, shrinking=True, tol=0.001,\n",
      "    verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 10 Best Parameters: {'C': 100, 'gamma': 1}\n",
      "\n",
      "Dataset 10 Best Estimators: SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n",
      "    probability=False, random_state=None, shrinking=True, tol=0.001,\n",
      "    verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 11 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 11 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 12 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 12 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 13 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 13 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 14 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 14 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 15 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 15 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 16 Best Parameters: {'C': 100, 'gamma': 1}\n",
      "\n",
      "Dataset 16 Best Estimators: SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n",
      "    probability=False, random_state=None, shrinking=True, tol=0.001,\n",
      "    verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 17 Best Parameters: {'C': 100, 'gamma': 1}\n",
      "\n",
      "Dataset 17 Best Estimators: SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n",
      "    probability=False, random_state=None, shrinking=True, tol=0.001,\n",
      "    verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 18 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 18 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 19 Best Parameters: {'C': 100, 'gamma': 1}\n",
      "\n",
      "Dataset 19 Best Estimators: SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n",
      "    probability=False, random_state=None, shrinking=True, tol=0.001,\n",
      "    verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 20 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 20 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 21 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 21 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 22 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 22 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 23 Best Parameters: {'C': 100, 'gamma': 1}\n",
      "\n",
      "Dataset 23 Best Estimators: SVC(C=100, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n",
      "    probability=False, random_state=None, shrinking=True, tol=0.001,\n",
      "    verbose=False)\n",
      "Fitting 3 folds for each of 24 candidates, totalling 72 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done  72 out of  72 | elapsed:  1.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 24 Best Parameters: {'C': 10, 'gamma': 10}\n",
      "\n",
      "Dataset 24 Best Estimators: SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n",
      "    decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
      "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
      "    tol=0.001, verbose=False)\n",
      "--- 2042.51 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "#parameter tuning with GridSearchCV\n",
    "param_grid = {'C': [0.1, 1, 10, 100], 'gamma': [1, 0.1, 0.01, 0.001, 0.00001, 10]}\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf_grid = GridSearchCV(svm.SVC(), param_grid, verbose=1)\n",
    "    clf_grid.fit(X_train, y_train)\n",
    "    y_pred = clf_grid.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*(precision[i]*recall[i]))/((precision[i] + recall[i]))\n",
    "    print(\"Dataset {} Best Parameters: {}\".format(i, clf_grid.best_params_))\n",
    "    print(\"\\nDataset {} Best Estimators: {}\".format(i, clf_grid.best_estimator_))\n",
    " \n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1598   94]\n",
      " [ 231 1362]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.94      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1598\n",
      "False Positives:  94\n",
      "False Negatives:  231\n",
      "True Positives:  1362\n",
      "Accuracy:  0.9010654490106544\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1618   74]\n",
      " [ 233 1360]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1618\n",
      "False Positives:  74\n",
      "False Negatives:  233\n",
      "True Positives:  1360\n",
      "Accuracy:  0.906544901065449\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1596   96]\n",
      " [ 214 1379]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1596\n",
      "False Positives:  96\n",
      "False Negatives:  214\n",
      "True Positives:  1379\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1589  103]\n",
      " [ 215 1378]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1589\n",
      "False Positives:  103\n",
      "False Negatives:  215\n",
      "True Positives:  1378\n",
      "Accuracy:  0.9031963470319635\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1624   68]\n",
      " [ 248 1345]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.84      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1624\n",
      "False Positives:  68\n",
      "False Negatives:  248\n",
      "True Positives:  1345\n",
      "Accuracy:  0.9038051750380518\n",
      "Precision 0.95\n",
      "Recall 0.84\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1612   80]\n",
      " [ 219 1374]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.92      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1612\n",
      "False Positives:  80\n",
      "False Negatives:  219\n",
      "True Positives:  1374\n",
      "Accuracy:  0.9089802130898021\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1594   98]\n",
      " [ 223 1370]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1594\n",
      "False Positives:  98\n",
      "False Negatives:  223\n",
      "True Positives:  1370\n",
      "Accuracy:  0.902283105022831\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1562  130]\n",
      " [ 207 1386]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.92      0.90      1692\n",
      "           1       0.91      0.87      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1562\n",
      "False Positives:  130\n",
      "False Negatives:  207\n",
      "True Positives:  1386\n",
      "Accuracy:  0.8974124809741248\n",
      "Precision 0.91\n",
      "Recall 0.87\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1578  114]\n",
      " [ 222 1371]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.90      1692\n",
      "           1       0.92      0.86      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1578\n",
      "False Positives:  114\n",
      "False Negatives:  222\n",
      "True Positives:  1371\n",
      "Accuracy:  0.897716894977169\n",
      "Precision 0.92\n",
      "Recall 0.86\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1602   90]\n",
      " [ 223 1370]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1602\n",
      "False Positives:  90\n",
      "False Negatives:  223\n",
      "True Positives:  1370\n",
      "Accuracy:  0.9047184170471841\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1588  104]\n",
      " [ 212 1381]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1588\n",
      "False Positives:  104\n",
      "False Negatives:  212\n",
      "True Positives:  1381\n",
      "Accuracy:  0.9038051750380518\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1629   63]\n",
      " [ 247 1346]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.96      0.84      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1629\n",
      "False Positives:  63\n",
      "False Negatives:  247\n",
      "True Positives:  1346\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.96\n",
      "Recall 0.84\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1605   87]\n",
      " [ 243 1350]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1605\n",
      "False Positives:  87\n",
      "False Negatives:  243\n",
      "True Positives:  1350\n",
      "Accuracy:  0.8995433789954338\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1605   87]\n",
      " [ 238 1355]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1605\n",
      "False Positives:  87\n",
      "False Negatives:  238\n",
      "True Positives:  1355\n",
      "Accuracy:  0.9010654490106544\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1618   74]\n",
      " [ 245 1348]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1618\n",
      "False Positives:  74\n",
      "False Negatives:  245\n",
      "True Positives:  1348\n",
      "Accuracy:  0.9028919330289193\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1627   65]\n",
      " [ 238 1355]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1627\n",
      "False Positives:  65\n",
      "False Negatives:  238\n",
      "True Positives:  1355\n",
      "Accuracy:  0.9077625570776255\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1606   86]\n",
      " [ 219 1374]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1606\n",
      "False Positives:  86\n",
      "False Negatives:  219\n",
      "True Positives:  1374\n",
      "Accuracy:  0.9071537290715372\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1583  109]\n",
      " [ 215 1378]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1583\n",
      "False Positives:  109\n",
      "False Negatives:  215\n",
      "True Positives:  1378\n",
      "Accuracy:  0.9013698630136986\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1623   69]\n",
      " [ 236 1357]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1623\n",
      "False Positives:  69\n",
      "False Negatives:  236\n",
      "True Positives:  1357\n",
      "Accuracy:  0.9071537290715372\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1591  101]\n",
      " [ 216 1377]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1591\n",
      "False Positives:  101\n",
      "False Negatives:  216\n",
      "True Positives:  1377\n",
      "Accuracy:  0.9035007610350076\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1620   72]\n",
      " [ 235 1358]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1620\n",
      "False Positives:  72\n",
      "False Negatives:  235\n",
      "True Positives:  1358\n",
      "Accuracy:  0.906544901065449\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1619   73]\n",
      " [ 237 1356]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1619\n",
      "False Positives:  73\n",
      "False Negatives:  237\n",
      "True Positives:  1356\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1603   89]\n",
      " [ 225 1368]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1603\n",
      "False Positives:  89\n",
      "False Negatives:  225\n",
      "True Positives:  1368\n",
      "Accuracy:  0.90441400304414\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1607   85]\n",
      " [ 225 1368]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1607\n",
      "False Positives:  85\n",
      "False Negatives:  225\n",
      "True Positives:  1368\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1595   97]\n",
      " [ 216 1377]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1595\n",
      "False Positives:  97\n",
      "False Negatives:  216\n",
      "True Positives:  1377\n",
      "Accuracy:  0.9047184170471841\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 90.39\n",
      "Ave recall = 85.73\n",
      "Ave precision = 93.94\n",
      "Ave F1 = 89.64\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "--- 88.77 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = SVC(C=10, cache_size=200, class_weight=None, coef0=0.0, \n",
    "              decision_function_shape='ovr', degree=3, gamma=10, kernel='rbf',\n",
    "              max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001, verbose=False)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*precision[i]*recall[i])/(precision[i] + recall[i])\n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1603   89]\n",
      " [ 233 1360]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1603\n",
      "False Positives:  89\n",
      "False Negatives:  233\n",
      "True Positives:  1360\n",
      "Accuracy:  0.9019786910197869\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1618   74]\n",
      " [ 233 1360]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1618\n",
      "False Positives:  74\n",
      "False Negatives:  233\n",
      "True Positives:  1360\n",
      "Accuracy:  0.906544901065449\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1629   63]\n",
      " [ 245 1348]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.96      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1629\n",
      "False Positives:  63\n",
      "False Negatives:  245\n",
      "True Positives:  1348\n",
      "Accuracy:  0.9062404870624049\n",
      "Precision 0.96\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1630   62]\n",
      " [ 250 1343]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.96      0.84      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.91      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1630\n",
      "False Positives:  62\n",
      "False Negatives:  250\n",
      "True Positives:  1343\n",
      "Accuracy:  0.9050228310502283\n",
      "Precision 0.96\n",
      "Recall 0.84\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1624   68]\n",
      " [ 248 1345]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.84      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1624\n",
      "False Positives:  68\n",
      "False Negatives:  248\n",
      "True Positives:  1345\n",
      "Accuracy:  0.9038051750380518\n",
      "Precision 0.95\n",
      "Recall 0.84\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1622   70]\n",
      " [ 244 1349]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1622\n",
      "False Positives:  70\n",
      "False Negatives:  244\n",
      "True Positives:  1349\n",
      "Accuracy:  0.90441400304414\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1594   98]\n",
      " [ 223 1370]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1594\n",
      "False Positives:  98\n",
      "False Negatives:  223\n",
      "True Positives:  1370\n",
      "Accuracy:  0.902283105022831\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1591  101]\n",
      " [ 230 1363]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1591\n",
      "False Positives:  101\n",
      "False Negatives:  230\n",
      "True Positives:  1363\n",
      "Accuracy:  0.8992389649923896\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1578  114]\n",
      " [ 222 1371]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.90      1692\n",
      "           1       0.92      0.86      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1578\n",
      "False Positives:  114\n",
      "False Negatives:  222\n",
      "True Positives:  1371\n",
      "Accuracy:  0.897716894977169\n",
      "Precision 0.92\n",
      "Recall 0.86\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1624   68]\n",
      " [ 249 1344]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.84      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1624\n",
      "False Positives:  68\n",
      "False Negatives:  249\n",
      "True Positives:  1344\n",
      "Accuracy:  0.9035007610350076\n",
      "Precision 0.95\n",
      "Recall 0.84\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1612   80]\n",
      " [ 237 1356]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1612\n",
      "False Positives:  80\n",
      "False Negatives:  237\n",
      "True Positives:  1356\n",
      "Accuracy:  0.9035007610350076\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1629   63]\n",
      " [ 247 1346]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.96      0.84      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1629\n",
      "False Positives:  63\n",
      "False Negatives:  247\n",
      "True Positives:  1346\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.96\n",
      "Recall 0.84\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1605   87]\n",
      " [ 243 1350]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1605\n",
      "False Positives:  87\n",
      "False Negatives:  243\n",
      "True Positives:  1350\n",
      "Accuracy:  0.8995433789954338\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1605   87]\n",
      " [ 238 1355]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1605\n",
      "False Positives:  87\n",
      "False Negatives:  238\n",
      "True Positives:  1355\n",
      "Accuracy:  0.9010654490106544\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1618   74]\n",
      " [ 245 1348]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1618\n",
      "False Positives:  74\n",
      "False Negatives:  245\n",
      "True Positives:  1348\n",
      "Accuracy:  0.9028919330289193\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1627   65]\n",
      " [ 238 1355]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1627\n",
      "False Positives:  65\n",
      "False Negatives:  238\n",
      "True Positives:  1355\n",
      "Accuracy:  0.9077625570776255\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1634   58]\n",
      " [ 236 1357]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.97      0.92      1692\n",
      "           1       0.96      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.92      0.91      0.91      3285\n",
      "weighted avg       0.92      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1634\n",
      "False Positives:  58\n",
      "False Negatives:  236\n",
      "True Positives:  1357\n",
      "Accuracy:  0.9105022831050228\n",
      "Precision 0.96\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1595   97]\n",
      " [ 241 1352]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.94      0.90      1692\n",
      "           1       0.93      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1595\n",
      "False Positives:  97\n",
      "False Negatives:  241\n",
      "True Positives:  1352\n",
      "Accuracy:  0.8971080669710807\n",
      "Precision 0.93\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1623   69]\n",
      " [ 236 1357]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1623\n",
      "False Positives:  69\n",
      "False Negatives:  236\n",
      "True Positives:  1357\n",
      "Accuracy:  0.9071537290715372\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1612   80]\n",
      " [ 241 1352]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1612\n",
      "False Positives:  80\n",
      "False Negatives:  241\n",
      "True Positives:  1352\n",
      "Accuracy:  0.902283105022831\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1620   72]\n",
      " [ 235 1358]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1620\n",
      "False Positives:  72\n",
      "False Negatives:  235\n",
      "True Positives:  1358\n",
      "Accuracy:  0.906544901065449\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1619   73]\n",
      " [ 237 1356]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1619\n",
      "False Positives:  73\n",
      "False Negatives:  237\n",
      "True Positives:  1356\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1603   89]\n",
      " [ 225 1368]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1603\n",
      "False Positives:  89\n",
      "False Negatives:  225\n",
      "True Positives:  1368\n",
      "Accuracy:  0.90441400304414\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1623   69]\n",
      " [ 255 1338]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.96      0.91      1692\n",
      "           1       0.95      0.84      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1623\n",
      "False Positives:  69\n",
      "False Negatives:  255\n",
      "True Positives:  1338\n",
      "Accuracy:  0.9013698630136986\n",
      "Precision 0.95\n",
      "Recall 0.84\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1595   97]\n",
      " [ 216 1377]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1595\n",
      "False Positives:  97\n",
      "False Negatives:  216\n",
      "True Positives:  1377\n",
      "Accuracy:  0.9047184170471841\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 90.36\n",
      "Ave recall = 85.07\n",
      "Ave precision = 94.53\n",
      "Ave F1 = 89.54\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "--- 82.81 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = SVC(C=100, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape='ovr', degree=3,\n",
    "              gamma=1, kernel='rbf', max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
    "              tol=0.001, verbose=False)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*precision[i]*recall[i])/(precision[i] + recall[i])\n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1598   94]\n",
      " [ 231 1362]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.94      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1598\n",
      "False Positives:  94\n",
      "False Negatives:  231\n",
      "True Positives:  1362\n",
      "Accuracy:  0.9010654490106544\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1598   94]\n",
      " [ 223 1370]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1598\n",
      "False Positives:  94\n",
      "False Negatives:  223\n",
      "True Positives:  1370\n",
      "Accuracy:  0.9035007610350076\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1596   96]\n",
      " [ 214 1379]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1596\n",
      "False Positives:  96\n",
      "False Negatives:  214\n",
      "True Positives:  1379\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1589  103]\n",
      " [ 215 1378]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1589\n",
      "False Positives:  103\n",
      "False Negatives:  215\n",
      "True Positives:  1378\n",
      "Accuracy:  0.9031963470319635\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1586  106]\n",
      " [ 214 1379]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1586\n",
      "False Positives:  106\n",
      "False Negatives:  214\n",
      "True Positives:  1379\n",
      "Accuracy:  0.9025875190258752\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1612   80]\n",
      " [ 219 1374]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.92      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1612\n",
      "False Positives:  80\n",
      "False Negatives:  219\n",
      "True Positives:  1374\n",
      "Accuracy:  0.9089802130898021\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1585  107]\n",
      " [ 219 1374]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1585\n",
      "False Positives:  107\n",
      "False Negatives:  219\n",
      "True Positives:  1374\n",
      "Accuracy:  0.9007610350076104\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1562  130]\n",
      " [ 207 1386]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.92      0.90      1692\n",
      "           1       0.91      0.87      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1562\n",
      "False Positives:  130\n",
      "False Negatives:  207\n",
      "True Positives:  1386\n",
      "Accuracy:  0.8974124809741248\n",
      "Precision 0.91\n",
      "Recall 0.87\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1557  135]\n",
      " [ 195 1398]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.92      0.90      1692\n",
      "           1       0.91      0.88      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1557\n",
      "False Positives:  135\n",
      "False Negatives:  195\n",
      "True Positives:  1398\n",
      "Accuracy:  0.8995433789954338\n",
      "Precision 0.91\n",
      "Recall 0.88\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1602   90]\n",
      " [ 223 1370]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1602\n",
      "False Positives:  90\n",
      "False Negatives:  223\n",
      "True Positives:  1370\n",
      "Accuracy:  0.9047184170471841\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1588  104]\n",
      " [ 212 1381]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1588\n",
      "False Positives:  104\n",
      "False Negatives:  212\n",
      "True Positives:  1381\n",
      "Accuracy:  0.9038051750380518\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1601   91]\n",
      " [ 227 1366]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1601\n",
      "False Positives:  91\n",
      "False Negatives:  227\n",
      "True Positives:  1366\n",
      "Accuracy:  0.9031963470319635\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1582  110]\n",
      " [ 214 1379]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.91      1692\n",
      "           1       0.93      0.87      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1582\n",
      "False Positives:  110\n",
      "False Negatives:  214\n",
      "True Positives:  1379\n",
      "Accuracy:  0.9013698630136986\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1582  110]\n",
      " [ 229 1364]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.93      0.90      1692\n",
      "           1       0.93      0.86      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1582\n",
      "False Positives:  110\n",
      "False Negatives:  229\n",
      "True Positives:  1364\n",
      "Accuracy:  0.8968036529680365\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1595   97]\n",
      " [ 219 1374]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1595\n",
      "False Positives:  97\n",
      "False Negatives:  219\n",
      "True Positives:  1374\n",
      "Accuracy:  0.9038051750380518\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1616   76]\n",
      " [ 214 1379]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.96      0.92      1692\n",
      "           1       0.95      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.92      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1616\n",
      "False Positives:  76\n",
      "False Negatives:  214\n",
      "True Positives:  1379\n",
      "Accuracy:  0.9117199391171994\n",
      "Precision 0.95\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1606   86]\n",
      " [ 219 1374]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1606\n",
      "False Positives:  86\n",
      "False Negatives:  219\n",
      "True Positives:  1374\n",
      "Accuracy:  0.9071537290715372\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1583  109]\n",
      " [ 215 1378]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1583\n",
      "False Positives:  109\n",
      "False Negatives:  215\n",
      "True Positives:  1378\n",
      "Accuracy:  0.9013698630136986\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1579  113]\n",
      " [ 220 1373]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.90      1692\n",
      "           1       0.92      0.86      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1579\n",
      "False Positives:  113\n",
      "False Negatives:  220\n",
      "True Positives:  1373\n",
      "Accuracy:  0.8986301369863013\n",
      "Precision 0.92\n",
      "Recall 0.86\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1591  101]\n",
      " [ 216 1377]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1591\n",
      "False Positives:  101\n",
      "False Negatives:  216\n",
      "True Positives:  1377\n",
      "Accuracy:  0.9035007610350076\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1568  124]\n",
      " [ 211 1382]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.90      1692\n",
      "           1       0.92      0.87      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1568\n",
      "False Positives:  124\n",
      "False Negatives:  211\n",
      "True Positives:  1382\n",
      "Accuracy:  0.898021308980213\n",
      "Precision 0.92\n",
      "Recall 0.87\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1593   99]\n",
      " [ 199 1394]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.94      0.91      1692\n",
      "           1       0.93      0.88      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1593\n",
      "False Positives:  99\n",
      "False Negatives:  199\n",
      "True Positives:  1394\n",
      "Accuracy:  0.9092846270928463\n",
      "Precision 0.93\n",
      "Recall 0.88\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1579  113]\n",
      " [ 207 1386]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.91      1692\n",
      "           1       0.92      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1579\n",
      "False Positives:  113\n",
      "False Negatives:  207\n",
      "True Positives:  1386\n",
      "Accuracy:  0.9025875190258752\n",
      "Precision 0.92\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1607   85]\n",
      " [ 225 1368]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1607\n",
      "False Positives:  85\n",
      "False Negatives:  225\n",
      "True Positives:  1368\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1595   97]\n",
      " [ 218 1375]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1595\n",
      "False Positives:  97\n",
      "False Negatives:  218\n",
      "True Positives:  1375\n",
      "Accuracy:  0.9041095890410958\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 90.31\n",
      "Ave recall = 86.43\n",
      "Ave precision = 93.11\n",
      "Ave F1 = 89.64\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "--- 91.85 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = SVC(C=10, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape='ovr', degree=3, \n",
    "              gamma=10, kernel='rbf', max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
    "              tol=0.001, verbose=False)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*precision[i]*recall[i])/(precision[i] + recall[i])\n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1603   89]\n",
      " [ 233 1360]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1603\n",
      "False Positives:  89\n",
      "False Negatives:  233\n",
      "True Positives:  1360\n",
      "Accuracy:  0.9019786910197869\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1618   74]\n",
      " [ 233 1360]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1618\n",
      "False Positives:  74\n",
      "False Negatives:  233\n",
      "True Positives:  1360\n",
      "Accuracy:  0.906544901065449\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1629   63]\n",
      " [ 245 1348]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.96      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1629\n",
      "False Positives:  63\n",
      "False Negatives:  245\n",
      "True Positives:  1348\n",
      "Accuracy:  0.9062404870624049\n",
      "Precision 0.96\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1630   62]\n",
      " [ 250 1343]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.96      0.84      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.91      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1630\n",
      "False Positives:  62\n",
      "False Negatives:  250\n",
      "True Positives:  1343\n",
      "Accuracy:  0.9050228310502283\n",
      "Precision 0.96\n",
      "Recall 0.84\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1624   68]\n",
      " [ 248 1345]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.84      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1624\n",
      "False Positives:  68\n",
      "False Negatives:  248\n",
      "True Positives:  1345\n",
      "Accuracy:  0.9038051750380518\n",
      "Precision 0.95\n",
      "Recall 0.84\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1622   70]\n",
      " [ 244 1349]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1622\n",
      "False Positives:  70\n",
      "False Negatives:  244\n",
      "True Positives:  1349\n",
      "Accuracy:  0.90441400304414\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1594   98]\n",
      " [ 223 1370]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1594\n",
      "False Positives:  98\n",
      "False Negatives:  223\n",
      "True Positives:  1370\n",
      "Accuracy:  0.902283105022831\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1591  101]\n",
      " [ 230 1363]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1591\n",
      "False Positives:  101\n",
      "False Negatives:  230\n",
      "True Positives:  1363\n",
      "Accuracy:  0.8992389649923896\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1578  114]\n",
      " [ 222 1371]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.90      1692\n",
      "           1       0.92      0.86      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1578\n",
      "False Positives:  114\n",
      "False Negatives:  222\n",
      "True Positives:  1371\n",
      "Accuracy:  0.897716894977169\n",
      "Precision 0.92\n",
      "Recall 0.86\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1624   68]\n",
      " [ 249 1344]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.84      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1624\n",
      "False Positives:  68\n",
      "False Negatives:  249\n",
      "True Positives:  1344\n",
      "Accuracy:  0.9035007610350076\n",
      "Precision 0.95\n",
      "Recall 0.84\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1612   80]\n",
      " [ 237 1356]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1612\n",
      "False Positives:  80\n",
      "False Negatives:  237\n",
      "True Positives:  1356\n",
      "Accuracy:  0.9035007610350076\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1629   63]\n",
      " [ 247 1346]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.96      0.84      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1629\n",
      "False Positives:  63\n",
      "False Negatives:  247\n",
      "True Positives:  1346\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.96\n",
      "Recall 0.84\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1605   87]\n",
      " [ 243 1350]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1605\n",
      "False Positives:  87\n",
      "False Negatives:  243\n",
      "True Positives:  1350\n",
      "Accuracy:  0.8995433789954338\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1605   87]\n",
      " [ 238 1355]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1605\n",
      "False Positives:  87\n",
      "False Negatives:  238\n",
      "True Positives:  1355\n",
      "Accuracy:  0.9010654490106544\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1618   74]\n",
      " [ 245 1348]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1618\n",
      "False Positives:  74\n",
      "False Negatives:  245\n",
      "True Positives:  1348\n",
      "Accuracy:  0.9028919330289193\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1627   65]\n",
      " [ 238 1355]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1627\n",
      "False Positives:  65\n",
      "False Negatives:  238\n",
      "True Positives:  1355\n",
      "Accuracy:  0.9077625570776255\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1634   58]\n",
      " [ 236 1357]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.97      0.92      1692\n",
      "           1       0.96      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.92      0.91      0.91      3285\n",
      "weighted avg       0.92      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1634\n",
      "False Positives:  58\n",
      "False Negatives:  236\n",
      "True Positives:  1357\n",
      "Accuracy:  0.9105022831050228\n",
      "Precision 0.96\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1595   97]\n",
      " [ 241 1352]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.94      0.90      1692\n",
      "           1       0.93      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1595\n",
      "False Positives:  97\n",
      "False Negatives:  241\n",
      "True Positives:  1352\n",
      "Accuracy:  0.8971080669710807\n",
      "Precision 0.93\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1623   69]\n",
      " [ 236 1357]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1623\n",
      "False Positives:  69\n",
      "False Negatives:  236\n",
      "True Positives:  1357\n",
      "Accuracy:  0.9071537290715372\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1612   80]\n",
      " [ 241 1352]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.95      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1612\n",
      "False Positives:  80\n",
      "False Negatives:  241\n",
      "True Positives:  1352\n",
      "Accuracy:  0.902283105022831\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1620   72]\n",
      " [ 235 1358]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1620\n",
      "False Positives:  72\n",
      "False Negatives:  235\n",
      "True Positives:  1358\n",
      "Accuracy:  0.906544901065449\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1619   73]\n",
      " [ 237 1356]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.96      0.91      1692\n",
      "           1       0.95      0.85      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1619\n",
      "False Positives:  73\n",
      "False Negatives:  237\n",
      "True Positives:  1356\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.95\n",
      "Recall 0.85\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1603   89]\n",
      " [ 225 1368]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1603\n",
      "False Positives:  89\n",
      "False Negatives:  225\n",
      "True Positives:  1368\n",
      "Accuracy:  0.90441400304414\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1623   69]\n",
      " [ 255 1338]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.96      0.91      1692\n",
      "           1       0.95      0.84      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1623\n",
      "False Positives:  69\n",
      "False Negatives:  255\n",
      "True Positives:  1338\n",
      "Accuracy:  0.9013698630136986\n",
      "Precision 0.95\n",
      "Recall 0.84\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1595   97]\n",
      " [ 216 1377]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1595\n",
      "False Positives:  97\n",
      "False Negatives:  216\n",
      "True Positives:  1377\n",
      "Accuracy:  0.9047184170471841\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 90.36\n",
      "Ave recall = 85.07\n",
      "Ave precision = 94.53\n",
      "Ave F1 = 89.54\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "--- 84.9 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = SVC(C=100, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape='ovr', degree=3,\n",
    "              gamma=1, kernel='rbf', max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001,\n",
    "              verbose=False)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*precision[i]*recall[i])/(precision[i] + recall[i])\n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1598   94]\n",
      " [ 231 1362]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.94      0.91      1692\n",
      "           1       0.94      0.85      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1598\n",
      "False Positives:  94\n",
      "False Negatives:  231\n",
      "True Positives:  1362\n",
      "Accuracy:  0.9010654490106544\n",
      "Precision 0.94\n",
      "Recall 0.85\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1598   94]\n",
      " [ 223 1370]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1598\n",
      "False Positives:  94\n",
      "False Negatives:  223\n",
      "True Positives:  1370\n",
      "Accuracy:  0.9035007610350076\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1596   96]\n",
      " [ 214 1379]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1596\n",
      "False Positives:  96\n",
      "False Negatives:  214\n",
      "True Positives:  1379\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1589  103]\n",
      " [ 215 1378]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1589\n",
      "False Positives:  103\n",
      "False Negatives:  215\n",
      "True Positives:  1378\n",
      "Accuracy:  0.9031963470319635\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1586  106]\n",
      " [ 214 1379]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1586\n",
      "False Positives:  106\n",
      "False Negatives:  214\n",
      "True Positives:  1379\n",
      "Accuracy:  0.9025875190258752\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1612   80]\n",
      " [ 219 1374]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.92      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1612\n",
      "False Positives:  80\n",
      "False Negatives:  219\n",
      "True Positives:  1374\n",
      "Accuracy:  0.9089802130898021\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1585  107]\n",
      " [ 219 1374]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1585\n",
      "False Positives:  107\n",
      "False Negatives:  219\n",
      "True Positives:  1374\n",
      "Accuracy:  0.9007610350076104\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1562  130]\n",
      " [ 207 1386]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.92      0.90      1692\n",
      "           1       0.91      0.87      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1562\n",
      "False Positives:  130\n",
      "False Negatives:  207\n",
      "True Positives:  1386\n",
      "Accuracy:  0.8974124809741248\n",
      "Precision 0.91\n",
      "Recall 0.87\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1557  135]\n",
      " [ 195 1398]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.92      0.90      1692\n",
      "           1       0.91      0.88      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1557\n",
      "False Positives:  135\n",
      "False Negatives:  195\n",
      "True Positives:  1398\n",
      "Accuracy:  0.8995433789954338\n",
      "Precision 0.91\n",
      "Recall 0.88\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1602   90]\n",
      " [ 223 1370]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1602\n",
      "False Positives:  90\n",
      "False Negatives:  223\n",
      "True Positives:  1370\n",
      "Accuracy:  0.9047184170471841\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1588  104]\n",
      " [ 212 1381]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1588\n",
      "False Positives:  104\n",
      "False Negatives:  212\n",
      "True Positives:  1381\n",
      "Accuracy:  0.9038051750380518\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1601   91]\n",
      " [ 227 1366]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1601\n",
      "False Positives:  91\n",
      "False Negatives:  227\n",
      "True Positives:  1366\n",
      "Accuracy:  0.9031963470319635\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1582  110]\n",
      " [ 214 1379]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.91      1692\n",
      "           1       0.93      0.87      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1582\n",
      "False Positives:  110\n",
      "False Negatives:  214\n",
      "True Positives:  1379\n",
      "Accuracy:  0.9013698630136986\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1582  110]\n",
      " [ 229 1364]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.93      0.90      1692\n",
      "           1       0.93      0.86      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1582\n",
      "False Positives:  110\n",
      "False Negatives:  229\n",
      "True Positives:  1364\n",
      "Accuracy:  0.8968036529680365\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1595   97]\n",
      " [ 219 1374]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1595\n",
      "False Positives:  97\n",
      "False Negatives:  219\n",
      "True Positives:  1374\n",
      "Accuracy:  0.9038051750380518\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1616   76]\n",
      " [ 214 1379]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.96      0.92      1692\n",
      "           1       0.95      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.92      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1616\n",
      "False Positives:  76\n",
      "False Negatives:  214\n",
      "True Positives:  1379\n",
      "Accuracy:  0.9117199391171994\n",
      "Precision 0.95\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1606   86]\n",
      " [ 219 1374]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1606\n",
      "False Positives:  86\n",
      "False Negatives:  219\n",
      "True Positives:  1374\n",
      "Accuracy:  0.9071537290715372\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1583  109]\n",
      " [ 215 1378]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.87      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1583\n",
      "False Positives:  109\n",
      "False Negatives:  215\n",
      "True Positives:  1378\n",
      "Accuracy:  0.9013698630136986\n",
      "Precision 0.93\n",
      "Recall 0.87\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1579  113]\n",
      " [ 220 1373]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.90      1692\n",
      "           1       0.92      0.86      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1579\n",
      "False Positives:  113\n",
      "False Negatives:  220\n",
      "True Positives:  1373\n",
      "Accuracy:  0.8986301369863013\n",
      "Precision 0.92\n",
      "Recall 0.86\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1591  101]\n",
      " [ 216 1377]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1591\n",
      "False Positives:  101\n",
      "False Negatives:  216\n",
      "True Positives:  1377\n",
      "Accuracy:  0.9035007610350076\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1568  124]\n",
      " [ 211 1382]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.90      1692\n",
      "           1       0.92      0.87      0.89      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1568\n",
      "False Positives:  124\n",
      "False Negatives:  211\n",
      "True Positives:  1382\n",
      "Accuracy:  0.898021308980213\n",
      "Precision 0.92\n",
      "Recall 0.87\n",
      "F1 Score 0.89\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1593   99]\n",
      " [ 199 1394]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.94      0.91      1692\n",
      "           1       0.93      0.88      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.91      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1593\n",
      "False Positives:  99\n",
      "False Negatives:  199\n",
      "True Positives:  1394\n",
      "Accuracy:  0.9092846270928463\n",
      "Precision 0.93\n",
      "Recall 0.88\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1579  113]\n",
      " [ 207 1386]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.93      0.91      1692\n",
      "           1       0.92      0.87      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.90      0.90      0.90      3285\n",
      "weighted avg       0.90      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1579\n",
      "False Positives:  113\n",
      "False Negatives:  207\n",
      "True Positives:  1386\n",
      "Accuracy:  0.9025875190258752\n",
      "Precision 0.92\n",
      "Recall 0.87\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1607   85]\n",
      " [ 225 1368]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.91      1692\n",
      "           1       0.94      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.91      3285\n",
      "   macro avg       0.91      0.90      0.91      3285\n",
      "weighted avg       0.91      0.91      0.91      3285\n",
      "\n",
      "\n",
      "True Negatives:  1607\n",
      "False Positives:  85\n",
      "False Negatives:  225\n",
      "True Positives:  1368\n",
      "Accuracy:  0.9056316590563166\n",
      "Precision 0.94\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1595   97]\n",
      " [ 218 1375]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91      1692\n",
      "           1       0.93      0.86      0.90      1593\n",
      "\n",
      "    accuracy                           0.90      3285\n",
      "   macro avg       0.91      0.90      0.90      3285\n",
      "weighted avg       0.91      0.90      0.90      3285\n",
      "\n",
      "\n",
      "True Negatives:  1595\n",
      "False Positives:  97\n",
      "False Negatives:  218\n",
      "True Positives:  1375\n",
      "Accuracy:  0.9041095890410958\n",
      "Precision 0.93\n",
      "Recall 0.86\n",
      "F1 Score 0.90\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 90.31\n",
      "Ave recall = 86.43\n",
      "Ave precision = 93.11\n",
      "Ave F1 = 89.64\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "--- 1919.13 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = svm.SVC(kernel='linear', C=1000)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*precision[i]*recall[i])/(precision[i] + recall[i])\n",
    "    print['round {}', i]\n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1082  610]\n",
      " [  65 1528]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1082\n",
      "False Positives:  610\n",
      "False Negatives:  65\n",
      "True Positives:  1528\n",
      "Accuracy:  0.7945205479452054\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1116  576]\n",
      " [  73 1520]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.66      0.77      1692\n",
      "           1       0.73      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1116\n",
      "False Positives:  576\n",
      "False Negatives:  73\n",
      "True Positives:  1520\n",
      "Accuracy:  0.8024353120243531\n",
      "Precision 0.73\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1089  603]\n",
      " [  63 1530]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1089\n",
      "False Positives:  603\n",
      "False Negatives:  63\n",
      "True Positives:  1530\n",
      "Accuracy:  0.7972602739726027\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1093  599]\n",
      " [  64 1529]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.84      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1093\n",
      "False Positives:  599\n",
      "False Negatives:  64\n",
      "True Positives:  1529\n",
      "Accuracy:  0.7981735159817351\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1063  629]\n",
      " [  53 1540]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.76      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1063\n",
      "False Positives:  629\n",
      "False Negatives:  53\n",
      "True Positives:  1540\n",
      "Accuracy:  0.7923896499238965\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1100  592]\n",
      " [  69 1524]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.80      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1100\n",
      "False Positives:  592\n",
      "False Negatives:  69\n",
      "True Positives:  1524\n",
      "Accuracy:  0.7987823439878234\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1085  607]\n",
      " [  65 1528]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1085\n",
      "False Positives:  607\n",
      "False Negatives:  65\n",
      "True Positives:  1528\n",
      "Accuracy:  0.7954337899543379\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1096  596]\n",
      " [  59 1534]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1096\n",
      "False Positives:  596\n",
      "False Negatives:  59\n",
      "True Positives:  1534\n",
      "Accuracy:  0.8006088280060882\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1020  672]\n",
      " [  52 1541]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.60      0.74      1692\n",
      "           1       0.70      0.97      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.82      0.79      0.77      3285\n",
      "weighted avg       0.83      0.78      0.77      3285\n",
      "\n",
      "\n",
      "True Negatives:  1020\n",
      "False Positives:  672\n",
      "False Negatives:  52\n",
      "True Positives:  1541\n",
      "Accuracy:  0.7796042617960426\n",
      "Precision 0.70\n",
      "Recall 0.97\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1071  621]\n",
      " [  66 1527]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1071\n",
      "False Positives:  621\n",
      "False Negatives:  66\n",
      "True Positives:  1527\n",
      "Accuracy:  0.7908675799086758\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1085  607]\n",
      " [  60 1533]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.76      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.84      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1085\n",
      "False Positives:  607\n",
      "False Negatives:  60\n",
      "True Positives:  1533\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1118  574]\n",
      " [  73 1520]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.66      0.78      1692\n",
      "           1       0.73      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1118\n",
      "False Positives:  574\n",
      "False Negatives:  73\n",
      "True Positives:  1520\n",
      "Accuracy:  0.8030441400304414\n",
      "Precision 0.73\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1049  643]\n",
      " [  53 1540]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.62      0.75      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1049\n",
      "False Positives:  643\n",
      "False Negatives:  53\n",
      "True Positives:  1540\n",
      "Accuracy:  0.7881278538812785\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1079  613]\n",
      " [  64 1529]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1079\n",
      "False Positives:  613\n",
      "False Negatives:  64\n",
      "True Positives:  1529\n",
      "Accuracy:  0.7939117199391172\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1101  591]\n",
      " [  54 1539]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.65      0.77      1692\n",
      "           1       0.72      0.97      0.83      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.84      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1101\n",
      "False Positives:  591\n",
      "False Negatives:  54\n",
      "True Positives:  1539\n",
      "Accuracy:  0.8036529680365296\n",
      "Precision 0.72\n",
      "Recall 0.97\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1099  593]\n",
      " [  67 1526]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.80      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1099\n",
      "False Positives:  593\n",
      "False Negatives:  67\n",
      "True Positives:  1526\n",
      "Accuracy:  0.7990867579908676\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1066  626]\n",
      " [  71 1522]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.75      1692\n",
      "           1       0.71      0.96      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1066\n",
      "False Positives:  626\n",
      "False Negatives:  71\n",
      "True Positives:  1522\n",
      "Accuracy:  0.7878234398782344\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1040  652]\n",
      " [  54 1539]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.61      0.75      1692\n",
      "           1       0.70      0.97      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1040\n",
      "False Positives:  652\n",
      "False Negatives:  54\n",
      "True Positives:  1539\n",
      "Accuracy:  0.7850837138508371\n",
      "Precision 0.70\n",
      "Recall 0.97\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1093  599]\n",
      " [  75 1518]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.76      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1093\n",
      "False Positives:  599\n",
      "False Negatives:  75\n",
      "True Positives:  1518\n",
      "Accuracy:  0.7948249619482496\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1033  659]\n",
      " [  57 1536]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.61      0.74      1692\n",
      "           1       0.70      0.96      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.83      0.78      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1033\n",
      "False Positives:  659\n",
      "False Negatives:  57\n",
      "True Positives:  1536\n",
      "Accuracy:  0.7820395738203957\n",
      "Precision 0.70\n",
      "Recall 0.96\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1059  633]\n",
      " [  56 1537]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.75      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1059\n",
      "False Positives:  633\n",
      "False Negatives:  56\n",
      "True Positives:  1537\n",
      "Accuracy:  0.7902587519025875\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1096  596]\n",
      " [  67 1526]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1096\n",
      "False Positives:  596\n",
      "False Negatives:  67\n",
      "True Positives:  1526\n",
      "Accuracy:  0.7981735159817351\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1072  620]\n",
      " [  66 1527]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1072\n",
      "False Positives:  620\n",
      "False Negatives:  66\n",
      "True Positives:  1527\n",
      "Accuracy:  0.7911719939117199\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1049  643]\n",
      " [  61 1532]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.62      0.75      1692\n",
      "           1       0.70      0.96      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1049\n",
      "False Positives:  643\n",
      "False Negatives:  61\n",
      "True Positives:  1532\n",
      "Accuracy:  0.7856925418569254\n",
      "Precision 0.70\n",
      "Recall 0.96\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1087  605]\n",
      " [  62 1531]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1087\n",
      "False Positives:  605\n",
      "False Negatives:  62\n",
      "True Positives:  1531\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 79.39\n",
      "Ave recall = 96.06\n",
      "Ave precision = 71.36\n",
      "Ave F1 = 81.89\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "round 0\n",
      "round 1\n",
      "round 2\n",
      "round 3\n",
      "round 4\n",
      "round 5\n",
      "round 6\n",
      "round 7\n",
      "round 8\n",
      "round 9\n",
      "round 10\n",
      "round 11\n",
      "round 12\n",
      "round 13\n",
      "round 14\n",
      "round 15\n",
      "round 16\n",
      "round 17\n",
      "round 18\n",
      "round 19\n",
      "round 20\n",
      "round 21\n",
      "round 22\n",
      "round 23\n",
      "round 24\n",
      "--- 67.91 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = svm.SVC(kernel='linear', C=1.0)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*precision[i]*recall[i])/(precision[i] + recall[i])\n",
    "    print('round {}'.format(i))\n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1081  611]\n",
      " [  65 1528]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1081\n",
      "False Positives:  611\n",
      "False Negatives:  65\n",
      "True Positives:  1528\n",
      "Accuracy:  0.7942161339421613\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1116  576]\n",
      " [  73 1520]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.66      0.77      1692\n",
      "           1       0.73      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1116\n",
      "False Positives:  576\n",
      "False Negatives:  73\n",
      "True Positives:  1520\n",
      "Accuracy:  0.8024353120243531\n",
      "Precision 0.73\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1088  604]\n",
      " [  63 1530]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1088\n",
      "False Positives:  604\n",
      "False Negatives:  63\n",
      "True Positives:  1530\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1087  605]\n",
      " [  63 1530]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.76      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1087\n",
      "False Positives:  605\n",
      "False Negatives:  63\n",
      "True Positives:  1530\n",
      "Accuracy:  0.7966514459665145\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1062  630]\n",
      " [  53 1540]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.76      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1062\n",
      "False Positives:  630\n",
      "False Negatives:  53\n",
      "True Positives:  1540\n",
      "Accuracy:  0.7920852359208523\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1095  597]\n",
      " [  69 1524]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1095\n",
      "False Positives:  597\n",
      "False Negatives:  69\n",
      "True Positives:  1524\n",
      "Accuracy:  0.7972602739726027\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1083  609]\n",
      " [  63 1530]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.76      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1083\n",
      "False Positives:  609\n",
      "False Negatives:  63\n",
      "True Positives:  1530\n",
      "Accuracy:  0.7954337899543379\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1096  596]\n",
      " [  59 1534]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1096\n",
      "False Positives:  596\n",
      "False Negatives:  59\n",
      "True Positives:  1534\n",
      "Accuracy:  0.8006088280060882\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1020  672]\n",
      " [  51 1542]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.60      0.74      1692\n",
      "           1       0.70      0.97      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.82      0.79      0.77      3285\n",
      "weighted avg       0.83      0.78      0.77      3285\n",
      "\n",
      "\n",
      "True Negatives:  1020\n",
      "False Positives:  672\n",
      "False Negatives:  51\n",
      "True Positives:  1542\n",
      "Accuracy:  0.7799086757990867\n",
      "Precision 0.70\n",
      "Recall 0.97\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1070  622]\n",
      " [  66 1527]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1070\n",
      "False Positives:  622\n",
      "False Negatives:  66\n",
      "True Positives:  1527\n",
      "Accuracy:  0.7905631659056317\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1082  610]\n",
      " [  57 1536]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.76      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.84      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1082\n",
      "False Positives:  610\n",
      "False Negatives:  57\n",
      "True Positives:  1536\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1114  578]\n",
      " [  72 1521]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.66      0.77      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1114\n",
      "False Positives:  578\n",
      "False Negatives:  72\n",
      "True Positives:  1521\n",
      "Accuracy:  0.802130898021309\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1049  643]\n",
      " [  53 1540]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.62      0.75      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1049\n",
      "False Positives:  643\n",
      "False Negatives:  53\n",
      "True Positives:  1540\n",
      "Accuracy:  0.7881278538812785\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1074  618]\n",
      " [  61 1532]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1074\n",
      "False Positives:  618\n",
      "False Negatives:  61\n",
      "True Positives:  1532\n",
      "Accuracy:  0.7933028919330289\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1094  598]\n",
      " [  53 1540]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.65      0.77      1692\n",
      "           1       0.72      0.97      0.83      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.84      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1094\n",
      "False Positives:  598\n",
      "False Negatives:  53\n",
      "True Positives:  1540\n",
      "Accuracy:  0.8018264840182648\n",
      "Precision 0.72\n",
      "Recall 0.97\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1098  594]\n",
      " [  67 1526]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.80      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1098\n",
      "False Positives:  594\n",
      "False Negatives:  67\n",
      "True Positives:  1526\n",
      "Accuracy:  0.7987823439878234\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1062  630]\n",
      " [  72 1521]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.75      1692\n",
      "           1       0.71      0.95      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1062\n",
      "False Positives:  630\n",
      "False Negatives:  72\n",
      "True Positives:  1521\n",
      "Accuracy:  0.7863013698630137\n",
      "Precision 0.71\n",
      "Recall 0.95\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1039  653]\n",
      " [  54 1539]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.61      0.75      1692\n",
      "           1       0.70      0.97      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.83      0.78      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1039\n",
      "False Positives:  653\n",
      "False Negatives:  54\n",
      "True Positives:  1539\n",
      "Accuracy:  0.784779299847793\n",
      "Precision 0.70\n",
      "Recall 0.97\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1091  601]\n",
      " [  75 1518]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1091\n",
      "False Positives:  601\n",
      "False Negatives:  75\n",
      "True Positives:  1518\n",
      "Accuracy:  0.7942161339421613\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1033  659]\n",
      " [  57 1536]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.61      0.74      1692\n",
      "           1       0.70      0.96      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.83      0.78      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1033\n",
      "False Positives:  659\n",
      "False Negatives:  57\n",
      "True Positives:  1536\n",
      "Accuracy:  0.7820395738203957\n",
      "Precision 0.70\n",
      "Recall 0.96\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1058  634]\n",
      " [  56 1537]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.75      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1058\n",
      "False Positives:  634\n",
      "False Negatives:  56\n",
      "True Positives:  1537\n",
      "Accuracy:  0.7899543378995434\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1092  600]\n",
      " [  67 1526]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1092\n",
      "False Positives:  600\n",
      "False Negatives:  67\n",
      "True Positives:  1526\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1071  621]\n",
      " [  66 1527]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1071\n",
      "False Positives:  621\n",
      "False Negatives:  66\n",
      "True Positives:  1527\n",
      "Accuracy:  0.7908675799086758\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1049  643]\n",
      " [  61 1532]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.62      0.75      1692\n",
      "           1       0.70      0.96      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1049\n",
      "False Positives:  643\n",
      "False Negatives:  61\n",
      "True Positives:  1532\n",
      "Accuracy:  0.7856925418569254\n",
      "Precision 0.70\n",
      "Recall 0.96\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1087  605]\n",
      " [  62 1531]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.64      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1087\n",
      "False Positives:  605\n",
      "False Negatives:  62\n",
      "True Positives:  1531\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 79.34\n",
      "Ave recall = 96.09\n",
      "Ave precision = 71.30\n",
      "Ave F1 = 81.86\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.8s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 0 Best Parameters: {'alpha': 0.01, 'n_iter_no_change': 1, 'penalty': 'none'}\n",
      "\n",
      "Dataset 0 Best Estimators: SGDClassifier(alpha=0.01, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=1, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.9s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 1 Best Parameters: {'alpha': 0.1, 'n_iter_no_change': 10, 'penalty': 'none'}\n",
      "\n",
      "Dataset 1 Best Estimators: SGDClassifier(alpha=0.1, average=False, class_weight=None, early_stopping=False,\n",
      "              epsilon=0.1, eta0=0.0, fit_intercept=True, l1_ratio=0.15,\n",
      "              learning_rate='optimal', loss='hinge', max_iter=1000,\n",
      "              n_iter_no_change=10, n_jobs=None, penalty='none', power_t=0.5,\n",
      "              random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.1s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 2 Best Parameters: {'alpha': 0.01, 'n_iter_no_change': 5, 'penalty': 'none'}\n",
      "\n",
      "Dataset 2 Best Estimators: SGDClassifier(alpha=0.01, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.7s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 3 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 5, 'penalty': 'none'}\n",
      "\n",
      "Dataset 3 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.9s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 4 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 1, 'penalty': 'none'}\n",
      "\n",
      "Dataset 4 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=1, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.8s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 5 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 5, 'penalty': 'l2'}\n",
      "\n",
      "Dataset 5 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='l2',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.9s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 6 Best Parameters: {'alpha': 0.1, 'n_iter_no_change': 1, 'penalty': 'none'}\n",
      "\n",
      "Dataset 6 Best Estimators: SGDClassifier(alpha=0.1, average=False, class_weight=None, early_stopping=False,\n",
      "              epsilon=0.1, eta0=0.0, fit_intercept=True, l1_ratio=0.15,\n",
      "              learning_rate='optimal', loss='hinge', max_iter=1000,\n",
      "              n_iter_no_change=1, n_jobs=None, penalty='none', power_t=0.5,\n",
      "              random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.9s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 7 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 5, 'penalty': 'none'}\n",
      "\n",
      "Dataset 7 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.3s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 8 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 5, 'penalty': 'none'}\n",
      "\n",
      "Dataset 8 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.2s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 9 Best Parameters: {'alpha': 0.01, 'n_iter_no_change': 5, 'penalty': 'l1'}\n",
      "\n",
      "Dataset 9 Best Estimators: SGDClassifier(alpha=0.01, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='l1',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.0s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 10 Best Parameters: {'alpha': 0.1, 'n_iter_no_change': 5, 'penalty': 'none'}\n",
      "\n",
      "Dataset 10 Best Estimators: SGDClassifier(alpha=0.1, average=False, class_weight=None, early_stopping=False,\n",
      "              epsilon=0.1, eta0=0.0, fit_intercept=True, l1_ratio=0.15,\n",
      "              learning_rate='optimal', loss='hinge', max_iter=1000,\n",
      "              n_iter_no_change=5, n_jobs=None, penalty='none', power_t=0.5,\n",
      "              random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.0s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 11 Best Parameters: {'alpha': 0.1, 'n_iter_no_change': 1, 'penalty': 'none'}\n",
      "\n",
      "Dataset 11 Best Estimators: SGDClassifier(alpha=0.1, average=False, class_weight=None, early_stopping=False,\n",
      "              epsilon=0.1, eta0=0.0, fit_intercept=True, l1_ratio=0.15,\n",
      "              learning_rate='optimal', loss='hinge', max_iter=1000,\n",
      "              n_iter_no_change=1, n_jobs=None, penalty='none', power_t=0.5,\n",
      "              random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.9s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 12 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 5, 'penalty': 'l2'}\n",
      "\n",
      "Dataset 12 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='l2',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.9s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 13 Best Parameters: {'alpha': 0.1, 'n_iter_no_change': 1, 'penalty': 'none'}\n",
      "\n",
      "Dataset 13 Best Estimators: SGDClassifier(alpha=0.1, average=False, class_weight=None, early_stopping=False,\n",
      "              epsilon=0.1, eta0=0.0, fit_intercept=True, l1_ratio=0.15,\n",
      "              learning_rate='optimal', loss='hinge', max_iter=1000,\n",
      "              n_iter_no_change=1, n_jobs=None, penalty='none', power_t=0.5,\n",
      "              random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.1s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 14 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 5, 'penalty': 'none'}\n",
      "\n",
      "Dataset 14 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.8s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 15 Best Parameters: {'alpha': 0.001, 'n_iter_no_change': 1, 'penalty': 'l2'}\n",
      "\n",
      "Dataset 15 Best Estimators: SGDClassifier(alpha=0.001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=1, n_jobs=None, penalty='l2',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.0s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 16 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 5, 'penalty': 'l1'}\n",
      "\n",
      "Dataset 16 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='l1',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.9s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 17 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 1, 'penalty': 'none'}\n",
      "\n",
      "Dataset 17 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=1, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.8s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 18 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 5, 'penalty': 'l2'}\n",
      "\n",
      "Dataset 18 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='l2',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.0s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 19 Best Parameters: {'alpha': 0.1, 'n_iter_no_change': 10, 'penalty': 'none'}\n",
      "\n",
      "Dataset 19 Best Estimators: SGDClassifier(alpha=0.1, average=False, class_weight=None, early_stopping=False,\n",
      "              epsilon=0.1, eta0=0.0, fit_intercept=True, l1_ratio=0.15,\n",
      "              learning_rate='optimal', loss='hinge', max_iter=1000,\n",
      "              n_iter_no_change=10, n_jobs=None, penalty='none', power_t=0.5,\n",
      "              random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.2s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 20 Best Parameters: {'alpha': 0.01, 'n_iter_no_change': 5, 'penalty': 'none'}\n",
      "\n",
      "Dataset 20 Best Estimators: SGDClassifier(alpha=0.01, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.4s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 21 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 10, 'penalty': 'none'}\n",
      "\n",
      "Dataset 21 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=10, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.3s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 22 Best Parameters: {'alpha': 0.01, 'n_iter_no_change': 1, 'penalty': 'none'}\n",
      "\n",
      "Dataset 22 Best Estimators: SGDClassifier(alpha=0.01, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=1, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    2.2s finished\n",
      "/Users/colette/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset 23 Best Parameters: {'alpha': 0.0001, 'n_iter_no_change': 1, 'penalty': 'none'}\n",
      "\n",
      "Dataset 23 Best Estimators: SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=1, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Fitting 3 folds for each of 63 candidates, totalling 189 fits\n",
      "Dataset 24 Best Parameters: {'alpha': 0.01, 'n_iter_no_change': 1, 'penalty': 'none'}\n",
      "\n",
      "Dataset 24 Best Estimators: SGDClassifier(alpha=0.01, average=False, class_weight=None,\n",
      "              early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
      "              l1_ratio=0.15, learning_rate='optimal', loss='hinge',\n",
      "              max_iter=1000, n_iter_no_change=1, n_jobs=None, penalty='none',\n",
      "              power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
      "              validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "--- 50.77 seconds ---\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 189 out of 189 | elapsed:    1.9s finished\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "#parameter tuning with GridSearchCV\n",
    "param_grid = {\"n_iter_no_change\": [1, 5, 10],\n",
    "              \"alpha\": [0.0001, 0.001, 0.01, 0.1, 1, 10, 100],\n",
    "              \"penalty\": [\"none\", \"l1\", \"l2\"]}\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf_grid = GridSearchCV(linear_model.SGDClassifier(), param_grid, verbose=1)\n",
    "    #clf = SGDClassifier()\n",
    "    #clf_grid = GridSearchCV(clf, param_grid=param_grid)\n",
    "    clf_grid.fit(X_train, y_train)\n",
    "    y_pred = clf_grid.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*(precision[i]*recall[i]))/((precision[i] + recall[i]))\n",
    "    print(\"Dataset {} Best Parameters: {}\".format(i, clf_grid.best_params_))\n",
    "    print(\"\\nDataset {} Best Estimators: {}\".format(i, clf_grid.best_estimator_))\n",
    " \n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1433  259]\n",
      " [ 293 1300]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.85      0.84      1692\n",
      "           1       0.83      0.82      0.82      1593\n",
      "\n",
      "    accuracy                           0.83      3285\n",
      "   macro avg       0.83      0.83      0.83      3285\n",
      "weighted avg       0.83      0.83      0.83      3285\n",
      "\n",
      "\n",
      "True Negatives:  1433\n",
      "False Positives:  259\n",
      "False Negatives:  293\n",
      "True Positives:  1300\n",
      "Accuracy:  0.8319634703196347\n",
      "Precision 0.83\n",
      "Recall 0.82\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1447  245]\n",
      " [ 321 1272]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.86      0.84      1692\n",
      "           1       0.84      0.80      0.82      1593\n",
      "\n",
      "    accuracy                           0.83      3285\n",
      "   macro avg       0.83      0.83      0.83      3285\n",
      "weighted avg       0.83      0.83      0.83      3285\n",
      "\n",
      "\n",
      "True Negatives:  1447\n",
      "False Positives:  245\n",
      "False Negatives:  321\n",
      "True Positives:  1272\n",
      "Accuracy:  0.8277016742770168\n",
      "Precision 0.84\n",
      "Recall 0.80\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1112  580]\n",
      " [  74 1519]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.66      0.77      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.83      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1112\n",
      "False Positives:  580\n",
      "False Negatives:  74\n",
      "True Positives:  1519\n",
      "Accuracy:  0.8009132420091324\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1124  568]\n",
      " [  75 1518]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.66      0.78      1692\n",
      "           1       0.73      0.95      0.83      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1124\n",
      "False Positives:  568\n",
      "False Negatives:  75\n",
      "True Positives:  1518\n",
      "Accuracy:  0.8042617960426179\n",
      "Precision 0.73\n",
      "Recall 0.95\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1071  621]\n",
      " [  44 1549]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.63      0.76      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.84      0.80      0.79      3285\n",
      "weighted avg       0.84      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1071\n",
      "False Positives:  621\n",
      "False Negatives:  44\n",
      "True Positives:  1549\n",
      "Accuracy:  0.7975646879756468\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1543  149]\n",
      " [ 416 1177]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.79      0.91      0.85      1692\n",
      "           1       0.89      0.74      0.81      1593\n",
      "\n",
      "    accuracy                           0.83      3285\n",
      "   macro avg       0.84      0.83      0.83      3285\n",
      "weighted avg       0.84      0.83      0.83      3285\n",
      "\n",
      "\n",
      "True Negatives:  1543\n",
      "False Positives:  149\n",
      "False Negatives:  416\n",
      "True Positives:  1177\n",
      "Accuracy:  0.8280060882800608\n",
      "Precision 0.89\n",
      "Recall 0.74\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1137  555]\n",
      " [  82 1511]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.67      0.78      1692\n",
      "           1       0.73      0.95      0.83      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.81      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1137\n",
      "False Positives:  555\n",
      "False Negatives:  82\n",
      "True Positives:  1511\n",
      "Accuracy:  0.8060882800608828\n",
      "Precision 0.73\n",
      "Recall 0.95\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1105  587]\n",
      " [  68 1525]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.84      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1105\n",
      "False Positives:  587\n",
      "False Negatives:  68\n",
      "True Positives:  1525\n",
      "Accuracy:  0.8006088280060882\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1502  190]\n",
      " [ 362 1231]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.89      0.84      1692\n",
      "           1       0.87      0.77      0.82      1593\n",
      "\n",
      "    accuracy                           0.83      3285\n",
      "   macro avg       0.84      0.83      0.83      3285\n",
      "weighted avg       0.84      0.83      0.83      3285\n",
      "\n",
      "\n",
      "True Negatives:  1502\n",
      "False Positives:  190\n",
      "False Negatives:  362\n",
      "True Positives:  1231\n",
      "Accuracy:  0.8319634703196347\n",
      "Precision 0.87\n",
      "Recall 0.77\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[ 981  711]\n",
      " [  26 1567]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.58      0.73      1692\n",
      "           1       0.69      0.98      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.83      0.78      0.77      3285\n",
      "weighted avg       0.84      0.78      0.77      3285\n",
      "\n",
      "\n",
      "True Negatives:  981\n",
      "False Positives:  711\n",
      "False Negatives:  26\n",
      "True Positives:  1567\n",
      "Accuracy:  0.7756468797564688\n",
      "Precision 0.69\n",
      "Recall 0.98\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1087  605]\n",
      " [  64 1529]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1087\n",
      "False Positives:  605\n",
      "False Negatives:  64\n",
      "True Positives:  1529\n",
      "Accuracy:  0.7963470319634703\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1371  321]\n",
      " [ 229 1364]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.81      0.83      1692\n",
      "           1       0.81      0.86      0.83      1593\n",
      "\n",
      "    accuracy                           0.83      3285\n",
      "   macro avg       0.83      0.83      0.83      3285\n",
      "weighted avg       0.83      0.83      0.83      3285\n",
      "\n",
      "\n",
      "True Negatives:  1371\n",
      "False Positives:  321\n",
      "False Negatives:  229\n",
      "True Positives:  1364\n",
      "Accuracy:  0.832572298325723\n",
      "Precision 0.81\n",
      "Recall 0.86\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1041  651]\n",
      " [  42 1551]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.62      0.75      1692\n",
      "           1       0.70      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.84      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1041\n",
      "False Positives:  651\n",
      "False Negatives:  42\n",
      "True Positives:  1551\n",
      "Accuracy:  0.7890410958904109\n",
      "Precision 0.70\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1051  641]\n",
      " [  47 1546]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.62      0.75      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.84      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1051\n",
      "False Positives:  641\n",
      "False Negatives:  47\n",
      "True Positives:  1546\n",
      "Accuracy:  0.7905631659056317\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1213  479]\n",
      " [ 126 1467]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.72      0.80      1692\n",
      "           1       0.75      0.92      0.83      1593\n",
      "\n",
      "    accuracy                           0.82      3285\n",
      "   macro avg       0.83      0.82      0.81      3285\n",
      "weighted avg       0.83      0.82      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1213\n",
      "False Positives:  479\n",
      "False Negatives:  126\n",
      "True Positives:  1467\n",
      "Accuracy:  0.8158295281582952\n",
      "Precision 0.75\n",
      "Recall 0.92\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1110  582]\n",
      " [  75 1518]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.66      0.77      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.80      3285\n",
      "weighted avg       0.83      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1110\n",
      "False Positives:  582\n",
      "False Negatives:  75\n",
      "True Positives:  1518\n",
      "Accuracy:  0.8\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1146  546]\n",
      " [ 106 1487]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.68      0.78      1692\n",
      "           1       0.73      0.93      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.81      0.80      3285\n",
      "weighted avg       0.83      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1146\n",
      "False Positives:  546\n",
      "False Negatives:  106\n",
      "True Positives:  1487\n",
      "Accuracy:  0.8015220700152207\n",
      "Precision 0.73\n",
      "Recall 0.93\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1488  204]\n",
      " [ 326 1267]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.88      0.85      1692\n",
      "           1       0.86      0.80      0.83      1593\n",
      "\n",
      "    accuracy                           0.84      3285\n",
      "   macro avg       0.84      0.84      0.84      3285\n",
      "weighted avg       0.84      0.84      0.84      3285\n",
      "\n",
      "\n",
      "True Negatives:  1488\n",
      "False Positives:  204\n",
      "False Negatives:  326\n",
      "True Positives:  1267\n",
      "Accuracy:  0.8386605783866058\n",
      "Precision 0.86\n",
      "Recall 0.80\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1056  636]\n",
      " [  62 1531]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.62      0.75      1692\n",
      "           1       0.71      0.96      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1056\n",
      "False Positives:  636\n",
      "False Negatives:  62\n",
      "True Positives:  1531\n",
      "Accuracy:  0.7875190258751903\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1024  668]\n",
      " [  54 1539]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.61      0.74      1692\n",
      "           1       0.70      0.97      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.82      0.79      0.77      3285\n",
      "weighted avg       0.83      0.78      0.77      3285\n",
      "\n",
      "\n",
      "True Negatives:  1024\n",
      "False Positives:  668\n",
      "False Negatives:  54\n",
      "True Positives:  1539\n",
      "Accuracy:  0.7802130898021309\n",
      "Precision 0.70\n",
      "Recall 0.97\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1082  610]\n",
      " [  68 1525]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1082\n",
      "False Positives:  610\n",
      "False Negatives:  68\n",
      "True Positives:  1525\n",
      "Accuracy:  0.7936073059360731\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1456  236]\n",
      " [ 285 1308]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.86      0.85      1692\n",
      "           1       0.85      0.82      0.83      1593\n",
      "\n",
      "    accuracy                           0.84      3285\n",
      "   macro avg       0.84      0.84      0.84      3285\n",
      "weighted avg       0.84      0.84      0.84      3285\n",
      "\n",
      "\n",
      "True Negatives:  1456\n",
      "False Positives:  236\n",
      "False Negatives:  285\n",
      "True Positives:  1308\n",
      "Accuracy:  0.841400304414003\n",
      "Precision 0.85\n",
      "Recall 0.82\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1300  392]\n",
      " [ 207 1386]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.77      0.81      1692\n",
      "           1       0.78      0.87      0.82      1593\n",
      "\n",
      "    accuracy                           0.82      3285\n",
      "   macro avg       0.82      0.82      0.82      3285\n",
      "weighted avg       0.82      0.82      0.82      3285\n",
      "\n",
      "\n",
      "True Negatives:  1300\n",
      "False Positives:  392\n",
      "False Negatives:  207\n",
      "True Positives:  1386\n",
      "Accuracy:  0.8176560121765601\n",
      "Precision 0.78\n",
      "Recall 0.87\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1136  556]\n",
      " [ 102 1491]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.67      0.78      1692\n",
      "           1       0.73      0.94      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.80      0.80      3285\n",
      "weighted avg       0.83      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1136\n",
      "False Positives:  556\n",
      "False Negatives:  102\n",
      "True Positives:  1491\n",
      "Accuracy:  0.7996955859969559\n",
      "Precision 0.73\n",
      "Recall 0.94\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1160  532]\n",
      " [  91 1502]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.69      0.79      1692\n",
      "           1       0.74      0.94      0.83      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.83      0.81      0.81      3285\n",
      "weighted avg       0.84      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1160\n",
      "False Positives:  532\n",
      "False Negatives:  91\n",
      "True Positives:  1502\n",
      "Accuracy:  0.8103500761035007\n",
      "Precision 0.74\n",
      "Recall 0.94\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 80.80\n",
      "Ave recall = 90.85\n",
      "Ave precision = 75.80\n",
      "Ave F1 = 82.12\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "round 0\n",
      "round 1\n",
      "round 2\n",
      "round 3\n",
      "round 4\n",
      "round 5\n",
      "round 6\n",
      "round 7\n",
      "round 8\n",
      "round 9\n",
      "round 10\n",
      "round 11\n",
      "round 12\n",
      "round 13\n",
      "round 14\n",
      "round 15\n",
      "round 16\n",
      "round 17\n",
      "round 18\n",
      "round 19\n",
      "round 20\n",
      "round 21\n",
      "round 22\n",
      "round 23\n",
      "round 24\n",
      "--- 0.95 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = SGDClassifier(alpha=0.0001, average=False, class_weight=None, early_stopping=False, \n",
    "                        epsilon=0.1, eta0=0.0, fit_intercept=True, l1_ratio=0.15, learning_rate='optimal',\n",
    "                        loss='hinge', max_iter=1000, n_iter_no_change=5, n_jobs=None, penalty='none', power_t=0.5,\n",
    "                        random_state=None, shuffle=True, tol=0.001, validation_fraction=0.1, verbose=0,\n",
    "                        warm_start=False)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*precision[i]*recall[i])/(precision[i] + recall[i])\n",
    "    print('round {}'.format(i))\n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1391  301]\n",
      " [ 260 1333]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.82      0.83      1692\n",
      "           1       0.82      0.84      0.83      1593\n",
      "\n",
      "    accuracy                           0.83      3285\n",
      "   macro avg       0.83      0.83      0.83      3285\n",
      "weighted avg       0.83      0.83      0.83      3285\n",
      "\n",
      "\n",
      "True Negatives:  1391\n",
      "False Positives:  301\n",
      "False Negatives:  260\n",
      "True Positives:  1333\n",
      "Accuracy:  0.8292237442922374\n",
      "Precision 0.82\n",
      "Recall 0.84\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1380  312]\n",
      " [ 251 1342]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.82      0.83      1692\n",
      "           1       0.81      0.84      0.83      1593\n",
      "\n",
      "    accuracy                           0.83      3285\n",
      "   macro avg       0.83      0.83      0.83      3285\n",
      "weighted avg       0.83      0.83      0.83      3285\n",
      "\n",
      "\n",
      "True Negatives:  1380\n",
      "False Positives:  312\n",
      "False Negatives:  251\n",
      "True Positives:  1342\n",
      "Accuracy:  0.8286149162861491\n",
      "Precision 0.81\n",
      "Recall 0.84\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1197  495]\n",
      " [ 143 1450]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.71      0.79      1692\n",
      "           1       0.75      0.91      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.81      0.80      3285\n",
      "weighted avg       0.82      0.81      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1197\n",
      "False Positives:  495\n",
      "False Negatives:  143\n",
      "True Positives:  1450\n",
      "Accuracy:  0.8057838660578387\n",
      "Precision 0.75\n",
      "Recall 0.91\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1070  622]\n",
      " [  47 1546]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.63      0.76      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.84      0.80      0.79      3285\n",
      "weighted avg       0.84      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1070\n",
      "False Positives:  622\n",
      "False Negatives:  47\n",
      "True Positives:  1546\n",
      "Accuracy:  0.7963470319634703\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1089  603]\n",
      " [  65 1528]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.77      1692\n",
      "           1       0.72      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1089\n",
      "False Positives:  603\n",
      "False Negatives:  65\n",
      "True Positives:  1528\n",
      "Accuracy:  0.7966514459665145\n",
      "Precision 0.72\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1181  511]\n",
      " [ 101 1492]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.70      0.79      1692\n",
      "           1       0.74      0.94      0.83      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.83      0.82      0.81      3285\n",
      "weighted avg       0.84      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1181\n",
      "False Positives:  511\n",
      "False Negatives:  101\n",
      "True Positives:  1492\n",
      "Accuracy:  0.8136986301369863\n",
      "Precision 0.74\n",
      "Recall 0.94\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1053  639]\n",
      " [  45 1548]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.62      0.75      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.84      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1053\n",
      "False Positives:  639\n",
      "False Negatives:  45\n",
      "True Positives:  1548\n",
      "Accuracy:  0.7917808219178082\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1130  562]\n",
      " [  68 1525]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.67      0.78      1692\n",
      "           1       0.73      0.96      0.83      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.84      0.81      0.81      3285\n",
      "weighted avg       0.84      0.81      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1130\n",
      "False Positives:  562\n",
      "False Negatives:  68\n",
      "True Positives:  1525\n",
      "Accuracy:  0.8082191780821918\n",
      "Precision 0.73\n",
      "Recall 0.96\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1259  433]\n",
      " [ 179 1414]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.74      0.80      1692\n",
      "           1       0.77      0.89      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.82      0.81      3285\n",
      "weighted avg       0.82      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1259\n",
      "False Positives:  433\n",
      "False Negatives:  179\n",
      "True Positives:  1414\n",
      "Accuracy:  0.8136986301369863\n",
      "Precision 0.77\n",
      "Recall 0.89\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1370  322]\n",
      " [ 246 1347]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.81      0.83      1692\n",
      "           1       0.81      0.85      0.83      1593\n",
      "\n",
      "    accuracy                           0.83      3285\n",
      "   macro avg       0.83      0.83      0.83      3285\n",
      "weighted avg       0.83      0.83      0.83      3285\n",
      "\n",
      "\n",
      "True Negatives:  1370\n",
      "False Positives:  322\n",
      "False Negatives:  246\n",
      "True Positives:  1347\n",
      "Accuracy:  0.8270928462709285\n",
      "Precision 0.81\n",
      "Recall 0.85\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1139  553]\n",
      " [  86 1507]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.67      0.78      1692\n",
      "           1       0.73      0.95      0.83      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.83      0.81      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1139\n",
      "False Positives:  553\n",
      "False Negatives:  86\n",
      "True Positives:  1507\n",
      "Accuracy:  0.8054794520547945\n",
      "Precision 0.73\n",
      "Recall 0.95\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1491  201]\n",
      " [ 329 1264]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.88      0.85      1692\n",
      "           1       0.86      0.79      0.83      1593\n",
      "\n",
      "    accuracy                           0.84      3285\n",
      "   macro avg       0.84      0.84      0.84      3285\n",
      "weighted avg       0.84      0.84      0.84      3285\n",
      "\n",
      "\n",
      "True Negatives:  1491\n",
      "False Positives:  201\n",
      "False Negatives:  329\n",
      "True Positives:  1264\n",
      "Accuracy:  0.8386605783866058\n",
      "Precision 0.86\n",
      "Recall 0.79\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1067  625]\n",
      " [  54 1539]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.76      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.84      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1067\n",
      "False Positives:  625\n",
      "False Negatives:  54\n",
      "True Positives:  1539\n",
      "Accuracy:  0.7933028919330289\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1345  347]\n",
      " [ 230 1363]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.79      0.82      1692\n",
      "           1       0.80      0.86      0.83      1593\n",
      "\n",
      "    accuracy                           0.82      3285\n",
      "   macro avg       0.83      0.83      0.82      3285\n",
      "weighted avg       0.83      0.82      0.82      3285\n",
      "\n",
      "\n",
      "True Negatives:  1345\n",
      "False Positives:  347\n",
      "False Negatives:  230\n",
      "True Positives:  1363\n",
      "Accuracy:  0.8243531202435312\n",
      "Precision 0.80\n",
      "Recall 0.86\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1453  239]\n",
      " [ 312 1281]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.86      0.84      1692\n",
      "           1       0.84      0.80      0.82      1593\n",
      "\n",
      "    accuracy                           0.83      3285\n",
      "   macro avg       0.83      0.83      0.83      3285\n",
      "weighted avg       0.83      0.83      0.83      3285\n",
      "\n",
      "\n",
      "True Negatives:  1453\n",
      "False Positives:  239\n",
      "False Negatives:  312\n",
      "True Positives:  1281\n",
      "Accuracy:  0.8322678843226788\n",
      "Precision 0.84\n",
      "Recall 0.80\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1481  211]\n",
      " [ 306 1287]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.88      0.85      1692\n",
      "           1       0.86      0.81      0.83      1593\n",
      "\n",
      "    accuracy                           0.84      3285\n",
      "   macro avg       0.84      0.84      0.84      3285\n",
      "weighted avg       0.84      0.84      0.84      3285\n",
      "\n",
      "\n",
      "True Negatives:  1481\n",
      "False Positives:  211\n",
      "False Negatives:  306\n",
      "True Positives:  1287\n",
      "Accuracy:  0.8426179604261796\n",
      "Precision 0.86\n",
      "Recall 0.81\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1248  444]\n",
      " [ 183 1410]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.74      0.80      1692\n",
      "           1       0.76      0.89      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.81      0.81      3285\n",
      "weighted avg       0.82      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1248\n",
      "False Positives:  444\n",
      "False Negatives:  183\n",
      "True Positives:  1410\n",
      "Accuracy:  0.8091324200913242\n",
      "Precision 0.76\n",
      "Recall 0.89\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1030  662]\n",
      " [  44 1549]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.61      0.74      1692\n",
      "           1       0.70      0.97      0.81      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.79      0.78      3285\n",
      "weighted avg       0.83      0.79      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1030\n",
      "False Positives:  662\n",
      "False Negatives:  44\n",
      "True Positives:  1549\n",
      "Accuracy:  0.7850837138508371\n",
      "Precision 0.70\n",
      "Recall 0.97\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1549  143]\n",
      " [ 394 1199]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.92      0.85      1692\n",
      "           1       0.89      0.75      0.82      1593\n",
      "\n",
      "    accuracy                           0.84      3285\n",
      "   macro avg       0.85      0.83      0.83      3285\n",
      "weighted avg       0.84      0.84      0.84      3285\n",
      "\n",
      "\n",
      "True Negatives:  1549\n",
      "False Positives:  143\n",
      "False Negatives:  394\n",
      "True Positives:  1199\n",
      "Accuracy:  0.8365296803652968\n",
      "Precision 0.89\n",
      "Recall 0.75\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1559  133]\n",
      " [ 534 1059]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.92      0.82      1692\n",
      "           1       0.89      0.66      0.76      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.79      0.79      3285\n",
      "weighted avg       0.81      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1559\n",
      "False Positives:  133\n",
      "False Negatives:  534\n",
      "True Positives:  1059\n",
      "Accuracy:  0.7969558599695586\n",
      "Precision 0.89\n",
      "Recall 0.66\n",
      "F1 Score 0.76\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1077  615]\n",
      " [  64 1529]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.64      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1077\n",
      "False Positives:  615\n",
      "False Negatives:  64\n",
      "True Positives:  1529\n",
      "Accuracy:  0.7933028919330289\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1069  623]\n",
      " [  49 1544]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.63      0.76      1692\n",
      "           1       0.71      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.84      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1069\n",
      "False Positives:  623\n",
      "False Negatives:  49\n",
      "True Positives:  1544\n",
      "Accuracy:  0.7954337899543379\n",
      "Precision 0.71\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1114  578]\n",
      " [  84 1509]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.66      0.77      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.80      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1114\n",
      "False Positives:  578\n",
      "False Negatives:  84\n",
      "True Positives:  1509\n",
      "Accuracy:  0.7984779299847793\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1218  474]\n",
      " [ 148 1445]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.72      0.80      1692\n",
      "           1       0.75      0.91      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.81      0.81      3285\n",
      "weighted avg       0.82      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1218\n",
      "False Positives:  474\n",
      "False Negatives:  148\n",
      "True Positives:  1445\n",
      "Accuracy:  0.8106544901065449\n",
      "Precision 0.75\n",
      "Recall 0.91\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1080  612]\n",
      " [  48 1545]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.64      0.77      1692\n",
      "           1       0.72      0.97      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.84      0.80      0.79      3285\n",
      "weighted avg       0.84      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1080\n",
      "False Positives:  612\n",
      "False Negatives:  48\n",
      "True Positives:  1545\n",
      "Accuracy:  0.7990867579908676\n",
      "Precision 0.72\n",
      "Recall 0.97\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 81.09\n",
      "Ave recall = 89.28\n",
      "Ave precision = 76.90\n",
      "Ave F1 = 82.04\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "--- 1.14 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    pca.fit(X[i])\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X[i], y[i], test_size=0.25, random_state=0)\n",
    "    obs_train[i] = X_train.shape\n",
    "    obs_test[i] = X_test.shape\n",
    "    clf = SGDClassifier(tol=1e-3, shuffle=True, loss='log')\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    matrix[i] = confusion_matrix(y_test, y_pred)\n",
    "    report[i] = classification_report(y_test, y_pred)\n",
    "    #extracting true_positives, false_positives, true_negatives, false_negatives\n",
    "    tn[i], fp[i], fn[i], tp[i] = confusion_matrix(y_test, y_pred).ravel()\n",
    "    # Model Accuracy: how often is the classifier correct?\n",
    "    acc[i] = metrics.accuracy_score(y_test, y_pred)\n",
    "    #Precision - ‘Exactness’, ability of the model to return only relevant instances (ex. minimizing false positives)\n",
    "    precision[i] = tp[i]/(tp[i]+fp[i]) \n",
    "    #Recall - ‘Completeness’, ability of the model to identify all relevant instances, True Positive Rate, aka Sensitivity.\n",
    "    recall[i] = tp[i]/(tp[i]+fn[i]) \n",
    "    #F1 Score - Harmonic mean of Precision & Recall, used to indicate a balance between Precision & Recall providing each equal weightage, it ranges from 0 to 1\n",
    "    f1[i] = (2*precision[i]*recall[i])/(precision[i] + recall[i])\n",
    "    \n",
    "\n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of observations in 0 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1337  355]\n",
      " [ 224 1369]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.79      0.82      1692\n",
      "           1       0.79      0.86      0.83      1593\n",
      "\n",
      "    accuracy                           0.82      3285\n",
      "   macro avg       0.83      0.82      0.82      3285\n",
      "weighted avg       0.83      0.82      0.82      3285\n",
      "\n",
      "\n",
      "True Negatives:  1337\n",
      "False Positives:  355\n",
      "False Negatives:  224\n",
      "True Positives:  1369\n",
      "Accuracy:  0.8237442922374429\n",
      "Precision 0.79\n",
      "Recall 0.86\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 1 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1225  467]\n",
      " [ 152 1441]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.72      0.80      1692\n",
      "           1       0.76      0.90      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.81      0.81      3285\n",
      "weighted avg       0.82      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1225\n",
      "False Positives:  467\n",
      "False Negatives:  152\n",
      "True Positives:  1441\n",
      "Accuracy:  0.8115677321156773\n",
      "Precision 0.76\n",
      "Recall 0.90\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 2 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1245  447]\n",
      " [ 164 1429]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.74      0.80      1692\n",
      "           1       0.76      0.90      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.82      0.81      3285\n",
      "weighted avg       0.82      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1245\n",
      "False Positives:  447\n",
      "False Negatives:  164\n",
      "True Positives:  1429\n",
      "Accuracy:  0.8140030441400304\n",
      "Precision 0.76\n",
      "Recall 0.90\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 3 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1183  509]\n",
      " [ 138 1455]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.70      0.79      1692\n",
      "           1       0.74      0.91      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.81      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1183\n",
      "False Positives:  509\n",
      "False Negatives:  138\n",
      "True Positives:  1455\n",
      "Accuracy:  0.8030441400304414\n",
      "Precision 0.74\n",
      "Recall 0.91\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 4 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1122  570]\n",
      " [  80 1513]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.66      0.78      1692\n",
      "           1       0.73      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.83      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1122\n",
      "False Positives:  570\n",
      "False Negatives:  80\n",
      "True Positives:  1513\n",
      "Accuracy:  0.802130898021309\n",
      "Precision 0.73\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 5 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1306  386]\n",
      " [ 194 1399]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.77      0.82      1692\n",
      "           1       0.78      0.88      0.83      1593\n",
      "\n",
      "    accuracy                           0.82      3285\n",
      "   macro avg       0.83      0.83      0.82      3285\n",
      "weighted avg       0.83      0.82      0.82      3285\n",
      "\n",
      "\n",
      "True Negatives:  1306\n",
      "False Positives:  386\n",
      "False Negatives:  194\n",
      "True Positives:  1399\n",
      "Accuracy:  0.8234398782343988\n",
      "Precision 0.78\n",
      "Recall 0.88\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 6 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1189  503]\n",
      " [ 124 1469]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.70      0.79      1692\n",
      "           1       0.74      0.92      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.83      0.81      0.81      3285\n",
      "weighted avg       0.83      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1189\n",
      "False Positives:  503\n",
      "False Negatives:  124\n",
      "True Positives:  1469\n",
      "Accuracy:  0.8091324200913242\n",
      "Precision 0.74\n",
      "Recall 0.92\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 7 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1213  479]\n",
      " [ 147 1446]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.72      0.79      1692\n",
      "           1       0.75      0.91      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.81      0.81      3285\n",
      "weighted avg       0.82      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1213\n",
      "False Positives:  479\n",
      "False Negatives:  147\n",
      "True Positives:  1446\n",
      "Accuracy:  0.8094368340943684\n",
      "Precision 0.75\n",
      "Recall 0.91\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 8 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1188  504]\n",
      " [ 155 1438]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.70      0.78      1692\n",
      "           1       0.74      0.90      0.81      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.81      0.80      0.80      3285\n",
      "weighted avg       0.81      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1188\n",
      "False Positives:  504\n",
      "False Negatives:  155\n",
      "True Positives:  1438\n",
      "Accuracy:  0.7993911719939117\n",
      "Precision 0.74\n",
      "Recall 0.90\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 9 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1068  624]\n",
      " [  59 1534]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.63      0.76      1692\n",
      "           1       0.71      0.96      0.82      1593\n",
      "\n",
      "    accuracy                           0.79      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.79      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1068\n",
      "False Positives:  624\n",
      "False Negatives:  59\n",
      "True Positives:  1534\n",
      "Accuracy:  0.7920852359208523\n",
      "Precision 0.71\n",
      "Recall 0.96\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 10 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1389  303]\n",
      " [ 256 1337]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.82      0.83      1692\n",
      "           1       0.82      0.84      0.83      1593\n",
      "\n",
      "    accuracy                           0.83      3285\n",
      "   macro avg       0.83      0.83      0.83      3285\n",
      "weighted avg       0.83      0.83      0.83      3285\n",
      "\n",
      "\n",
      "True Negatives:  1389\n",
      "False Positives:  303\n",
      "False Negatives:  256\n",
      "True Positives:  1337\n",
      "Accuracy:  0.8298325722983257\n",
      "Precision 0.82\n",
      "Recall 0.84\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 11 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1259  433]\n",
      " [ 192 1401]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.74      0.80      1692\n",
      "           1       0.76      0.88      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.81      0.81      3285\n",
      "weighted avg       0.82      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1259\n",
      "False Positives:  433\n",
      "False Negatives:  192\n",
      "True Positives:  1401\n",
      "Accuracy:  0.8097412480974124\n",
      "Precision 0.76\n",
      "Recall 0.88\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 12 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1263  429]\n",
      " [ 179 1414]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.75      0.81      1692\n",
      "           1       0.77      0.89      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.82      0.81      3285\n",
      "weighted avg       0.82      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1263\n",
      "False Positives:  429\n",
      "False Negatives:  179\n",
      "True Positives:  1414\n",
      "Accuracy:  0.8149162861491629\n",
      "Precision 0.77\n",
      "Recall 0.89\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 13 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1102  590]\n",
      " [  73 1520]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.77      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1102\n",
      "False Positives:  590\n",
      "False Negatives:  73\n",
      "True Positives:  1520\n",
      "Accuracy:  0.7981735159817351\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 14 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1139  553]\n",
      " [  95 1498]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.67      0.78      1692\n",
      "           1       0.73      0.94      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.81      0.80      3285\n",
      "weighted avg       0.83      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1139\n",
      "False Positives:  553\n",
      "False Negatives:  95\n",
      "True Positives:  1498\n",
      "Accuracy:  0.8027397260273973\n",
      "Precision 0.73\n",
      "Recall 0.94\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 15 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1327  365]\n",
      " [ 218 1375]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.78      0.82      1692\n",
      "           1       0.79      0.86      0.83      1593\n",
      "\n",
      "    accuracy                           0.82      3285\n",
      "   macro avg       0.82      0.82      0.82      3285\n",
      "weighted avg       0.83      0.82      0.82      3285\n",
      "\n",
      "\n",
      "True Negatives:  1327\n",
      "False Positives:  365\n",
      "False Negatives:  218\n",
      "True Positives:  1375\n",
      "Accuracy:  0.8225266362252663\n",
      "Precision 0.79\n",
      "Recall 0.86\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 16 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1368  324]\n",
      " [ 238 1355]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.81      0.83      1692\n",
      "           1       0.81      0.85      0.83      1593\n",
      "\n",
      "    accuracy                           0.83      3285\n",
      "   macro avg       0.83      0.83      0.83      3285\n",
      "weighted avg       0.83      0.83      0.83      3285\n",
      "\n",
      "\n",
      "True Negatives:  1368\n",
      "False Positives:  324\n",
      "False Negatives:  238\n",
      "True Positives:  1355\n",
      "Accuracy:  0.8289193302891933\n",
      "Precision 0.81\n",
      "Recall 0.85\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 17 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1480  212]\n",
      " [ 367 1226]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.87      0.84      1692\n",
      "           1       0.85      0.77      0.81      1593\n",
      "\n",
      "    accuracy                           0.82      3285\n",
      "   macro avg       0.83      0.82      0.82      3285\n",
      "weighted avg       0.83      0.82      0.82      3285\n",
      "\n",
      "\n",
      "True Negatives:  1480\n",
      "False Positives:  212\n",
      "False Negatives:  367\n",
      "True Positives:  1226\n",
      "Accuracy:  0.8237442922374429\n",
      "Precision 0.85\n",
      "Recall 0.77\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 18 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1092  600]\n",
      " [  72 1521]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.65      0.76      1692\n",
      "           1       0.72      0.95      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.83      0.80      0.79      3285\n",
      "weighted avg       0.83      0.80      0.79      3285\n",
      "\n",
      "\n",
      "True Negatives:  1092\n",
      "False Positives:  600\n",
      "False Negatives:  72\n",
      "True Positives:  1521\n",
      "Accuracy:  0.7954337899543379\n",
      "Precision 0.72\n",
      "Recall 0.95\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 19 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1057  635]\n",
      " [  73 1520]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.62      0.75      1692\n",
      "           1       0.71      0.95      0.81      1593\n",
      "\n",
      "    accuracy                           0.78      3285\n",
      "   macro avg       0.82      0.79      0.78      3285\n",
      "weighted avg       0.82      0.78      0.78      3285\n",
      "\n",
      "\n",
      "True Negatives:  1057\n",
      "False Positives:  635\n",
      "False Negatives:  73\n",
      "True Positives:  1520\n",
      "Accuracy:  0.7844748858447489\n",
      "Precision 0.71\n",
      "Recall 0.95\n",
      "F1 Score 0.81\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 20 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1195  497]\n",
      " [ 149 1444]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.71      0.79      1692\n",
      "           1       0.74      0.91      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.81      0.80      3285\n",
      "weighted avg       0.82      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1195\n",
      "False Positives:  497\n",
      "False Negatives:  149\n",
      "True Positives:  1444\n",
      "Accuracy:  0.8033485540334856\n",
      "Precision 0.74\n",
      "Recall 0.91\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 21 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1498  194]\n",
      " [ 330 1263]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.89      0.85      1692\n",
      "           1       0.87      0.79      0.83      1593\n",
      "\n",
      "    accuracy                           0.84      3285\n",
      "   macro avg       0.84      0.84      0.84      3285\n",
      "weighted avg       0.84      0.84      0.84      3285\n",
      "\n",
      "\n",
      "True Negatives:  1498\n",
      "False Positives:  194\n",
      "False Negatives:  330\n",
      "True Positives:  1263\n",
      "Accuracy:  0.8404870624048706\n",
      "Precision 0.87\n",
      "Recall 0.79\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 22 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1225  467]\n",
      " [ 169 1424]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.72      0.79      1692\n",
      "           1       0.75      0.89      0.82      1593\n",
      "\n",
      "    accuracy                           0.81      3285\n",
      "   macro avg       0.82      0.81      0.81      3285\n",
      "weighted avg       0.82      0.81      0.81      3285\n",
      "\n",
      "\n",
      "True Negatives:  1225\n",
      "False Positives:  467\n",
      "False Negatives:  169\n",
      "True Positives:  1424\n",
      "Accuracy:  0.806392694063927\n",
      "Precision 0.75\n",
      "Recall 0.89\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 23 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1148  544]\n",
      " [ 105 1488]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.68      0.78      1692\n",
      "           1       0.73      0.93      0.82      1593\n",
      "\n",
      "    accuracy                           0.80      3285\n",
      "   macro avg       0.82      0.81      0.80      3285\n",
      "weighted avg       0.83      0.80      0.80      3285\n",
      "\n",
      "\n",
      "True Negatives:  1148\n",
      "False Positives:  544\n",
      "False Negatives:  105\n",
      "True Positives:  1488\n",
      "Accuracy:  0.8024353120243531\n",
      "Precision 0.73\n",
      "Recall 0.93\n",
      "F1 Score 0.82\n",
      "\n",
      "\n",
      "\n",
      "The number of observations in 24 training set is (9855, 9)\n",
      "The number of observations in test set is (3285, 9)\n",
      "Confusion Matrix\n",
      " [[1308  384]\n",
      " [ 191 1402]]\n",
      "Classification report\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.77      0.82      1692\n",
      "           1       0.78      0.88      0.83      1593\n",
      "\n",
      "    accuracy                           0.82      3285\n",
      "   macro avg       0.83      0.83      0.82      3285\n",
      "weighted avg       0.83      0.82      0.82      3285\n",
      "\n",
      "\n",
      "True Negatives:  1308\n",
      "False Positives:  384\n",
      "False Negatives:  191\n",
      "True Positives:  1402\n",
      "Accuracy:  0.8249619482496194\n",
      "Precision 0.78\n",
      "Recall 0.88\n",
      "F1 Score 0.83\n",
      "\n",
      "\n",
      "\n",
      "Ave accuracy = 81.10\n",
      "Ave recall = 89.59\n",
      "Ave precision = 76.24\n",
      "Ave F1 = 82.15\n"
     ]
    }
   ],
   "source": [
    "total_acc = 0\n",
    "total_recall = 0\n",
    "total_prec = 0\n",
    "total_f1 = 0\n",
    "\n",
    "for i in range(0, len(X)):\n",
    "    print(\"The number of observations in {} training set is {}\".format(i, obs_train[i]))\n",
    "    print(\"The number of observations in test set is {}\".format(obs_test[i]))\n",
    "    print(\"Confusion Matrix\\n\", matrix[i])\n",
    "    print(\"Classification report\\n\", report[i])\n",
    "    print(\"\\nTrue Negatives: \",tn[i])\n",
    "    print(\"False Positives: \",fp[i])\n",
    "    print(\"False Negatives: \",fn[i])\n",
    "    print(\"True Positives: \",tp[i])\n",
    "    print(\"Accuracy: \",acc[i])\n",
    "    print(\"Precision {:0.2f}\".format(precision[i]))\n",
    "    print(\"Recall {:0.2f}\".format(recall[i]))\n",
    "    print(\"F1 Score {:0.2f}\".format(f1[i]))\n",
    "    print(\"\\n\\n\")\n",
    "    total_acc = total_acc + acc[i]\n",
    "    total_recall = total_recall + recall[i]\n",
    "    total_prec = total_prec + precision[i]\n",
    "    total_f1 = total_f1 + f1[i]\n",
    "    \n",
    "print(\"Ave accuracy = {:0.2f}\".format((total_acc*100)/len(X)))\n",
    "print(\"Ave recall = {:0.2f}\".format((total_recall*100)/len(X)))\n",
    "print(\"Ave precision = {:0.2f}\".format((total_prec*100)/len(X)))\n",
    "print(\"Ave F1 = {:0.2f}\".format((total_f1*100)/len(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fraud_count = len(df[df.isFraud == 1])\n",
    "fraud_sample_count = int(len(df[df.isFraud == 1])*0.8)\n",
    "\n",
    "#collect all valid transactions for random use in balanced datasets\n",
    "valid_indices = df[df.isFraud == 0].index\n",
    "\n",
    "#collect all fraud transactions and set 20% aside for a final test\n",
    "fraud_indices = df[df.isFraud == 1].index\n",
    "fraud_train = fraud_indices[:fraud_sample_count]  #6570 samples used in every training dataset\n",
    "fraud_test = fraud_indices[fraud_sample_count:]   #1643 samples set aside for a final test dataset\n",
    "\n",
    "data_num = 4\n",
    "data_sample = dict()\n",
    "\n",
    "#generate small random datasets for training purposes\n",
    "for i in range (0,data_num):\n",
    "    random_ind = np.random.choice(valid_indices, fraud_sample_count, replace=False)  #random sample of valid indices\n",
    "    under_sample_ind = np.concatenate([fraud_train, random_ind])\n",
    "    data_sample[i] = df.loc[under_sample_ind]\n",
    "    \n",
    "#generate final testing dataset\n",
    "random_ind = np.random.choice(valid_indices, math.ceil(fraud_count*0.2), replace=False)  #random sample of valid indices\n",
    "under_sample_ind = np.concatenate([fraud_test, random_ind])\n",
    "testing_sample = df.loc[under_sample_ind]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "fraud_count = len(df[df.isFraud == 1])\n",
    "fraud_sample_count = int(len(df[df.isFraud == 1])*0.8)\n",
    "\n",
    "#collect all valid transactions for random use in balanced datasets\n",
    "valid_indices = df[df.isFraud == 0].index\n",
    "\n",
    "#collect all fraud transactions and set 20% aside for a final test\n",
    "fraud_indices = df[df.isFraud == 1].index\n",
    "fraud_train = fraud_indices[:fraud_sample_count]  #6570 samples used in every training dataset\n",
    "fraud_test = fraud_indices[fraud_sample_count:]   #1643 samples set aside for a final test dataset\n",
    "\n",
    "data_num = 4\n",
    "data_sample_over = dict()\n",
    "\n",
    "#generate larger random datasets for OVERSAMPLING training purposes\n",
    "for i in range (0,data_num):\n",
    "    random_ind_over = np.random.choice(valid_indices, 100000, replace=False)  #random sample of valid indices\n",
    "    over_sample_ind = np.concatenate([fraud_train, random_ind_over])\n",
    "    data_sample_over[i] = df.loc[over_sample_ind]\n",
    "    \n",
    "#generate final testing dataset\n",
    "#random_ind = np.random.choice(valid_indices, math.ceil(fraud_count*0.2), replace=False)  #random sample of valid indices\n",
    "#over_sample_ind = np.concatenate([fraud_test, random_ind])\n",
    "#testing_sample = df.loc[over_sample_ind]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Real = 100000\n",
      "Fake = 6570\n",
      "Percentage of transactions that are fraud: 6.164962\n"
     ]
    }
   ],
   "source": [
    "real = cat_filter(data_sample_over[0], 'isFraud', 0)['isFraud'].count()\n",
    "fake = cat_filter(data_sample_over[0], 'isFraud', 1)['isFraud'].count()\n",
    "percent_fraud = fake/(real+fake)\n",
    "\n",
    "print('Real =', real)\n",
    "print('Fake =', fake)\n",
    "print('Percentage of transactions that are fraud: {:.6f}'.format(percent_fraud*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "Xover = dict()\n",
    "yover = dict()\n",
    "\n",
    "for i in range(0, len(data_sample)):\n",
    "    Xover[i] = data_sample_over[i].drop(columns=['isFraud'])\n",
    "    yover[i] = data_sample_over[i]['isFraud']\n",
    "    Xover[i] = scaling.fit_transform(Xover[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "0",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-140-123d45474d04>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mXover\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m: 0"
     ]
    }
   ],
   "source": [
    "Xover[0].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working...\n",
      "Resampled dataset shape Counter({1: 6570, 0: 6570})\n",
      "Resampled dataset shape Counter({1: 6570, 0: 6570})\n",
      "Resampled dataset shape Counter({1: 6570, 0: 6570})\n",
      "Resampled dataset shape Counter({1: 6570, 0: 6570})\n",
      "--- 0.02 seconds ---\n"
     ]
    }
   ],
   "source": [
    "print('working...')\n",
    "start_time = time.time()\n",
    "\n",
    "ada = ADASYN(sampling_strategy='minority', random_state=42)\n",
    "\n",
    "for i in range (0,data_num):\n",
    "    X[i], y[i] = ada.fit_resample(X[i], y[i])\n",
    "    print('Resampled dataset shape %s' % Counter(y[i]))\n",
    "    \n",
    "print(\"--- %s seconds ---\" % round(time.time() - start_time, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
